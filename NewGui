Players = game:GetService("Players")
LocalPlayer = Players.LocalPlayer
PetInv = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.PetInventory
PetInner = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.PetInventory.PetInventoryInnerFrame
PetScroll = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.PetInventory.PetInventoryInnerFrame.PetInventoryScrollingFrame
MassDelete = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.PetInventory.MassDeleteButton
EquipTopPets = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.PetInventory.EquipTopPets
PetInvOver = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.PetInventory.PetInventoryOverlay
DeleteConfirm = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.DeletionFrame
TweenService = game:GetService("TweenService")
button = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightUIFrame.PetInventoryOpen

MaxPetEquipped = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.PetInventory.MaxPetEquipped
PetEquipped = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.PetInventory.PetEquipped
PetOwnedSeparator = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.PetInventory.PetOwnedSeperator

MaxPetsOwned = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.PetInventory.MaxPetOwned
PetOwned = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.PetInventory.PetOwned
PetOwnedSeparator2 = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.PetInventory:GetChildren()[19]

MassDeleteOverlay = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.PetInventory.MassDeleteOverlay

UpgradeRanch = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.UpgradeRanchFrame
UpgradeRanchArrow = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.UpgradeRanchFrame.Arrow
UpgradeRanchImage1 = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.UpgradeRanchFrame.RanchImage
UpgradeRanchImage2 = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.UpgradeRanchFrame:GetChildren()[8]
RanchMaxUpgradeFrame = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.UpgradeRanchFrame.RanchMaxUpgradeFrame
UpgradeRanchButton = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.UpgradeRanchFrame.RanchUpgrade
UpgRanchText = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.UpgradeRanchFrame.ReturningText1

isInventoryOpen = false
isRanchOpen = false

button.Position = UDim2.new(0, 0, 0, 900)
button.Size = UDim2.new(0.4, 0, 0.15, 0)
button.AnchorPoint = Vector2.new(0.5, 0.5)

PetInv.ImageTransparency = 1
PetInv.PetInventoryClose:Destroy()
PetInv.InvPawIcon:Destroy()
PetInv.InvBoxIcon:Destroy()
PetInv.IconMinimizer:Destroy()
PetInv.DeleteAllUnlocked:Destroy()
PetInner.ImageTransparency = 1


MainFrame1 = Instance.new("Frame")
MainFrame1.ZIndex = 0
MainFrame1.Name = "MainFrame1"
MainFrame1.Size = UDim2.new(0, 1000, 0, 500)
MainFrame1.Position = UDim2.new(0, 455, 0, 250)
MainFrame1.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
MainFrame1.Parent = PetInv


MainFrame2 = Instance.new("Frame")
MainFrame2.Name = "MainFrame2"
MainFrame2.BackgroundTransparency = 1
MainFrame2.Size = UDim2.new(0, 1000, 0, 500)
MainFrame2.Position = UDim2.new(0, 455, 0, 250)
MainFrame2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
MainFrame2.Parent = PetInner


MainCorner = Instance.new("UICorner")
MainCorner.CornerRadius = UDim.new(0, 25)
MainCorner.Parent = MainFrame1

MainStroke = Instance.new("UIStroke")
MainStroke.Color = Color3.fromRGB(46, 46, 53)
MainStroke.Thickness = 5
MainStroke.Parent = MainFrame1

DeleteLabel = Instance.new("TextLabel")
DeleteLabel.Name = "DeleteLabel"
DeleteLabel.BackgroundTransparency = 1
DeleteLabel.Visible = false
DeleteLabel.Size = UDim2.new(1, 0, 1, 0)
DeleteLabel.Text = "X"
DeleteLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
DeleteLabel.TextScaled = true
DeleteLabel.TextWrapped = true
DeleteLabel.TextXAlignment = Enum.TextXAlignment.Center
DeleteLabel.TextYAlignment = Enum.TextYAlignment.Bottom
DeleteLabel.ZIndex = 11
DeleteLabel.Parent = MainFrame2

DeleteLabelUIStroke = Instance.new("UIStroke")
DeleteLabelUIStroke.Name = "DeleteLabelUIStroke"
DeleteLabelUIStroke.Color = Color3.fromRGB(100, 0, 0)
DeleteLabelUIStroke.Thickness = 4
DeleteLabelUIStroke.Parent = DeleteLabel

DeleteLabelShadow = Instance.new("ImageLabel")
DeleteLabelShadow.Name = "DeleteLabelShadow"
DeleteLabelShadow.Size = UDim2.new(0, 90, 0, 90)
DeleteLabelShadow.ImageTransparency = 0.7
DeleteLabelShadow.Position = UDim2.new(0, 0, 0, 0)
DeleteLabelShadow.BackgroundTransparency = 1
DeleteLabelShadow.Image = "rbxassetid://14001321443"
DeleteLabelShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
DeleteLabelShadow.ZIndex = 10
DeleteLabelShadow.Parent = DeleteLabel

SpecialFrame = Instance.new("Frame")
SpecialFrame.Name = "SpecialBttns"
SpecialFrame.Size = UDim2.new(0, 300, 0, 50)
SpecialFrame.Position = UDim2.new(0, 650, 0, -25)
SpecialFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
SpecialFrame.Parent = MainFrame2

MassDelete.Size = UDim2.new(0, 40, 0, 40)
MassDelete.Position = UDim2.new(0, 145, 0, 4)
MassDelete.Image = "rbxassetid://96632271030514"
MassDelete.ImageColor3 = Color3.fromRGB(46, 46, 53)
MassDelete.Parent = SpecialFrame

EquipTopPets.Size = UDim2.new(0, 40, 0, 40)
EquipTopPets.Position = UDim2.new(0, 60, 0, 4)
EquipTopPets.Image = "rbxassetid://133453817967093"
EquipTopPets.ImageColor3 = Color3.fromRGB(46, 46, 53)
EquipTopPets.Parent = SpecialFrame

UnequipAll = Instance.new("ImageButton")
UnequipAll.Name = "UnequipAll"
UnequipAll.BackgroundTransparency = 1
UnequipAll.Size = UDim2.new(0, 37, 0, 37)
UnequipAll.Position = UDim2.new(0, 105, 0, 7)
UnequipAll.ImageColor3 = Color3.fromRGB(46, 46, 53)
UnequipAll.Image = "rbxassetid://136457455671765"
UnequipAll.Parent = SpecialFrame

EquipTopPets.EquipBestPetsText:Destroy()

ShrinkCorner = Instance.new("UICorner")
ShrinkCorner.CornerRadius = UDim.new(0, 50)
ShrinkCorner.Parent = SpecialFrame


ShrinkStroke = Instance.new("UIStroke")
ShrinkStroke.Color = Color3.fromRGB(46, 46, 53)
ShrinkStroke.Thickness = 5
ShrinkStroke.Parent = SpecialFrame

ShrinkButton = Instance.new("ImageButton")
ShrinkButton.Name = "ShrinkButton"
ShrinkButton.Size = UDim2.new(0.4, 0, 0.9, 0)
ShrinkButton.Position = UDim2.new(0, 10, 0, 2)
ShrinkButton.BackgroundTransparency = 1
ShrinkButton.Image = "rbxassetid://13654931441"
ShrinkButton.ImageColor3 = Color3.fromRGB(46, 46, 53)
ShrinkButton.Parent = SpecialFrame

ShrinkBttnUiAspect = Instance.new("UIAspectRatioConstraint")
ShrinkBttnUiAspect.Parent = ShrinkButton


EquippedFrame = Instance.new("Frame")
EquippedFrame.Name = "EquippedFrame"
EquippedFrame.Size = UDim2.new(0, 600, 0, 50)
EquippedFrame.Position = UDim2.new(0, 200, 0, 40)
EquippedFrame.BackgroundTransparency = 1
EquippedFrame.Parent = MainFrame2


RGradient = Instance.new("Frame")
RGradient.Name = "RGradient"
RGradient.Size = UDim2.new(0, 250, 0, 3)
RGradient.Position = UDim2.new(0, 450, 0, 25)
RGradient.BorderSizePixel = 0
RGradient.Parent = EquippedFrame


LGradient = Instance.new("Frame")
LGradient.Name = "LGradient"
LGradient.Size = UDim2.new(0, 250, 0, 3)
LGradient.Position = UDim2.new(0, -100, 0, 25)
LGradient.BorderSizePixel = 0
LGradient.Parent = EquippedFrame


RGradient2 = Instance.new("UIGradient")
RGradient2.Transparency = NumberSequence.new({
NumberSequenceKeypoint.new(0, 1),
NumberSequenceKeypoint.new(0.5, 0.5),
NumberSequenceKeypoint.new(1, 1)
})
RGradient2.Parent = RGradient


LGradient2 = Instance.new("UIGradient")
LGradient2.Transparency = NumberSequence.new({
NumberSequenceKeypoint.new(0, 1),
NumberSequenceKeypoint.new(0.5, 0.5),
NumberSequenceKeypoint.new(1, 1)
})
LGradient2.Parent = LGradient

MaxPets = Instance.new("Frame")
MaxPets.Name = "MaxPets"
MaxPets.AnchorPoint = Vector2.new(0.5, 0.5)
MaxPets.BackgroundTransparency = 1
MaxPets.Size = UDim2.new(0, 200, 0, 50)
MaxPets.Position = UDim2.new(0, 455, 0, 27)
MaxPets.Parent = EquippedFrame

MaxPetsUIGrid = Instance.new("UIGridLayout")
MaxPetsUIGrid.CellPadding = UDim2.new(0, 0, 0, 0)
MaxPetsUIGrid.CellSize = UDim2.new(0, 30, 0, 30)
MaxPetsUIGrid.FillDirection = Enum.FillDirection.Horizontal
MaxPetsUIGrid.VerticalAlignment = Enum.VerticalAlignment.Center
MaxPetsUIGrid.Parent = MaxPets


PetEquippedLabel = Instance.new("TextLabel")
PetEquippedLabel.Name = "Total Pets"
PetEquippedLabel.BackgroundTransparency = 1
PetEquippedLabel.Position = UDim2.new(0, 100, 0, 13)
PetEquippedLabel.Size = UDim2.new(0, 300, 0, 25)
PetEquippedLabel.Font = Enum.Font.FredokaOne
PetEquippedLabel.Text = "Pets Equipped :"
PetEquippedLabel.TextSize = 30
PetEquippedLabel.TextColor3 = Color3.fromRGB(27, 42, 53)
PetEquippedLabel.Parent = EquippedFrame


MaxPetEquipped.Position = UDim2.new(0, 410, 0, 5)
MaxPetEquipped.Name = "Z-MaxPetEquipped"
MaxPetEquipped.Size = UDim2.new(0, 40, 0, 40)
MaxPetEquipped.TextColor3 = Color3.fromRGB(0, 166, 242)
MaxPetEquipped.TextXAlignment = Enum.TextXAlignment.Right
MaxPetEquipped.TextStrokeTransparency = 1
MaxPetEquipped.Parent = MaxPets


PetEquipped.Position = UDim2.new(0, 355, 0, 5)
PetEquipped.Size = UDim2.new(0, 38, 0, 38)
PetEquipped.TextColor3 = Color3.fromRGB(0, 166, 242)
PetEquipped.TextStrokeTransparency = 1
MaxPetEquipped.TextXAlignment = Enum.TextXAlignment.Right
PetEquipped.Parent = MaxPets

PetOwnedSeparator.Parent = MaxPets
PetOwnedSeparator.Position = UDim2.new(0, 380, 0, 5)
PetOwnedSeparator.Size = UDim2.new(0, 40, 0, 40)
PetOwnedSeparator.TextColor3 = Color3.fromRGB(0, 166, 242)
PetOwnedSeparator.TextStrokeTransparency = 1


Pets = Instance.new("ScrollingFrame")
Pets.Name = "Pets"
Pets.BackgroundTransparency = 1
Pets.CanvasSize = UDim2.new(0, 0, 3, 0)
Pets.Position = UDim2.new(0, 0, 0, 90)
Pets.AutomaticSize = Enum.AutomaticSize.XY
Pets.BorderSizePixel = 0
Pets.Size = UDim2.new(0, 1000, 0, 400)
Pets.Parent = MainFrame2


PetsUIAspect = Instance.new("UIAspectRatioConstraint")
PetsUIAspect.Name = "PetsUIAspect"
PetsUIAspect.AspectRatio = 2.5
PetsUIAspect.Parent = Pets


PetsUIPadding = Instance.new("UIPadding")
PetsUIPadding.Name = "PetsUIPadding"
PetsUIPadding.PaddingBottom = UDim.new(0, 20)
PetsUIPadding.PaddingBottom = UDim.new(0.005, 5)
PetsUIPadding.PaddingBottom = UDim.new(0, 5)
PetsUIPadding.PaddingBottom = UDim.new(0, 30)
PetsUIPadding.Parent = Pets


PetsUIList = Instance.new("UIListLayout")
PetsUIList.Name = "PetsUIList"
PetsUIList.HorizontalAlignment = Enum.HorizontalAlignment.Center
PetsUIList.Padding = UDim.new(0, 25)
PetsUIList.Parent = Pets


EquippedPets = Instance.new("Frame")
EquippedPets.Name = "EquippedPets"
EquippedPets.AutomaticSize = Enum.AutomaticSize.Y
EquippedPets.BackgroundTransparency = 1
EquippedPets.Position = UDim2.new(0, 0, 0, 0)
EquippedPets.Size = UDim2.new(1,0, 0, 0)
EquippedPets.Parent = Pets


EquippedPetsGridLayout = Instance.new("UIGridLayout")
EquippedPetsGridLayout.CellPadding = UDim2.new(0, 5, 0, 5)
EquippedPetsGridLayout.CellSize = UDim2.new(0, 90, 0, 90)
EquippedPetsGridLayout.SortOrder = Enum.SortOrder.LayoutOrder
EquippedPetsGridLayout.StartCorner = Enum.StartCorner.TopLeft
EquippedPetsGridLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
EquippedPetsGridLayout.Parent = EquippedPets


Div = Instance.new("Frame")
Div.Name = "ODiv"
Div.BackgroundTransparency = 1
Div.Size = UDim2.new(0, 900, 0, 3)
Div.Parent = Pets


DivAspectRatio = Instance.new("UIAspectRatioConstraint")
DivAspectRatio.Name = "DivAspectRatio"
DivAspectRatio.AspectRatio = 300
DivAspectRatio.Parent = Div


TotalPetsFrame = Instance.new("Frame")
TotalPetsFrame.Name = "TotalPets"
TotalPetsFrame.AnchorPoint = Vector2.new(0.5, 0.5)
TotalPetsFrame.BackgroundTransparency = 1
TotalPetsFrame.BorderSizePixel = 0
TotalPetsFrame.Position = UDim2.new(0, 510, 0, 0)
TotalPetsFrame.Size = UDim2.new(0, 50, 0, 50)
TotalPetsFrame.Parent = Div

TotalPetsUIGrid = Instance.new("UIGridLayout")
TotalPetsUIGrid.Name = "TotalPetsUIGrid"
TotalPetsUIGrid.CellPadding = UDim2.new(0, 0, 0, 0)
TotalPetsUIGrid.CellSize = UDim2.new(0, 30, 0, 30)
TotalPetsUIGrid.FillDirection = Enum.FillDirection.Vertical
TotalPetsUIGrid.VerticalAlignment = Enum.VerticalAlignment.Center
TotalPetsUIGrid.Parent = TotalPetsFrame

--TotalPets:

PetOwned.Parent = TotalPetsFrame
PetOwned.TextColor3 = Color3.fromRGB(0, 166, 242)
PetOwned.TextSize = 30
PetOwned.TextStrokeTransparency = 1
PetOwned.TextXAlignment = Enum.TextXAlignment.Center
PetOwned.TextWrapped = false
PetOwned.TextScaled = false

MaxPetsOwned.Parent = TotalPetsFrame
MaxPetsOwned.Name = "Z-MaxPetsOwned"
MaxPetsOwned.TextSize = 30
MaxPetsOwned.TextColor3 = Color3.fromRGB(0, 166, 242)
MaxPetsOwned.TextStrokeTransparency = 1
MaxPetsOwned.TextXAlignment = Enum.TextXAlignment.Center
MaxPetsOwned.TextWrapped = false
MaxPetsOwned.TextScaled = false

PetOwnedSeparator2.Parent = TotalPetsFrame
PetOwnedSeparator2.TextColor3 = Color3.fromRGB(0, 166, 242)
PetOwnedSeparator2.TextSize = 30
PetOwnedSeparator2.TextStrokeTransparency = 1
PetOwnedSeparator2.TextXAlignment = Enum.TextXAlignment.Center
PetOwnedSeparator2.TextWrapped = false
PetOwnedSeparator2.TextScaled = false

RGradient3 = Instance.new("Frame")
RGradient3.Name = "RGradient"
RGradient3.Size = UDim2.new(0, 250, 0, 3)
RGradient3.Position = UDim2.new(0, 600, 0, 0)
RGradient3.BorderSizePixel = 0
RGradient3.Parent = Div


LGradient3 = Instance.new("Frame")
LGradient3.Name = "LGradient"
LGradient3.Size = UDim2.new(0, 250, 0, 3)
LGradient3.Position = UDim2.new(0, 50, 0, 0)
LGradient3.BorderSizePixel = 0
LGradient3.Parent = Div


RGradient4 = Instance.new("UIGradient")
RGradient4.Transparency = NumberSequence.new({
NumberSequenceKeypoint.new(0, 1),
NumberSequenceKeypoint.new(0.5, 0.5),
NumberSequenceKeypoint.new(1, 1)
})
RGradient4.Parent = RGradient3


LGradient4 = Instance.new("UIGradient")
LGradient4.Transparency = NumberSequence.new({
NumberSequenceKeypoint.new(0, 1),
NumberSequenceKeypoint.new(0.5, 0.5),
NumberSequenceKeypoint.new(1, 1)
})
LGradient4.Parent = LGradient3

TotalPetsLabel = Instance.new("TextLabel")
TotalPetsLabel.Name = "TotalPetsLabel"
TotalPetsLabel.Text = "Total Pets :"
TotalPetsLabel.TextSize = 30
TotalPetsLabel.Position = UDim2.new(0, 400, 0, 0)
TotalPetsLabel.Font = Enum.Font.FredokaOne
TotalPetsLabel.Parent = Div


PetScroll.Size = UDim2.new(0, 900, 0, 400)
PetScroll.AutomaticSize = Enum.AutomaticSize.XY
PetScroll.CanvasSize = UDim2.new(0, 0, 0, 0)
PetScroll.Position = UDim2.new(0, 50, 0, 90)
PetScroll.UIGridLayout.CellSize = UDim2.new(0, 90, 0, 90)
PetScroll.UIGridLayout.CellPadding = UDim2.new(0, 10, 0, 10)
PetScroll.UIGridLayout.FillDirectionMaxCells = 100
PetScroll.BorderSizePixel = 0
PetScroll.ScrollBarImageTransparency = 1
PetScroll.Parent = Pets


PetScrollPadding = Instance.new("UIPadding")
PetScrollPadding.PaddingRight = UDim.new(0, -10)
PetScrollPadding.Parent = PetScroll

PetScrollUIAspect = Instance.new("UIAspectRatioConstraint")
PetScrollUIAspect.Name = "PetScrollUIAspect"
PetScrollUIAspect.AspectRatio = 3.51
PetScrollUIAspect.Parent = PetScroll


PetInvOver.Position = UDim2.new(0, 1025, 0, 0)
PetInvOver.BackgroundTransparency = 1
PetInvOver.ImageTransparency = 1
PetInvOver.Parent = MainFrame2

PetInvOverFrame = Instance.new("Frame")
PetInvOverFrame.Size = UDim2.new(0, 350, 0, 500)
PetInvOverFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
PetInvOverFrame.Parent = PetInvOver

PetInvOverUiCor = Instance.new("UICorner")
PetInvOverUiCor. CornerRadius = UDim.new(0, 25)
PetInvOverUiCor.Parent = PetInvOverFrame

PetInvOverUiStroke = Instance.new("UIStroke")
PetInvOverUiStroke.Color = Color3.fromRGB(46, 46, 53)
PetInvOverUiStroke.Thickness = 5
PetInvOverUiStroke.Parent = PetInvOverFrame

------------------------------------------------------

UIStroke1 = Instance.new("UIStroke")
UIStroke1.Color = Color3.fromRGB(46, 46, 53)
UIStroke1.Thickness = 3
UIStroke1.Parent = PetInvOver.Upgrade5Frame.Upgrade5Box

UIStroke2 = Instance.new("UIStroke")
UIStroke2.Color = Color3.fromRGB(46, 46, 53)
UIStroke2.Thickness = 3
UIStroke2.Parent = PetInvOver.ItemName

PetInvOver.ItemName.TextColor3 = Color3.fromRGB(255, 255, 255)
PetInvOver.Upgrade5Frame.Upgrade5Text.TextScaled = false
PetInvOver.Upgrade5Frame.Upgrade5Text.TextWrapped = false
PetInvOver.Upgrade5Frame.Upgrade5Text.Text = "Upgrade : 5X"
PetInvOver.Upgrade5Frame.BorderSizePixel = 0
PetInvOver.Upgrade5Frame.Upgrade5Text.Position = UDim2.new(0, 90, 0, 0)
PetInvOver.Upgrade5Frame.Upgrade5Text.TextColor3 = Color3.fromRGB(0, 170, 255)
PetInvOver.Upgrade5Frame.Upgrade5Box.Image = "rbxassetid://75147311088478"
PetInvOver.Upgrade5Frame.Upgrade5Box.Size = UDim2.new(0, 45, 0, 40)
PetInvOver.Upgrade5Frame.Upgrade5Text.TextSize = 40

UICorner1 = Instance.new("UICorner")
UICorner1.CornerRadius = UDim.new(0, 5)
UICorner1.Parent = PetInvOver.OverlayShinyButton

UICorner2 = Instance.new("UICorner")
UICorner2.CornerRadius = UDim.new(0, 5)
UICorner2.Parent = PetInvOver.OverlayUnequipButton

UICorner3 = Instance.new("UICorner")
UICorner3.CornerRadius = UDim.new(0, 5)
UICorner3.Parent = PetInvOver.OverlayUpgradeButton

UICorner4 = Instance.new("UICorner")
UICorner4.CornerRadius = UDim.new(0, 5)
UICorner4.Parent = PetInvOver.OverlayDeleteButton

DeleteConfirm.Parent = PetInv
DeleteConfirm.Position = UDim2.new(0, 0, 0, 250)
DeleteConfirm.Size = UDim2.new(0, 1000, 0, 500)
DeleteConfirm.ImageTransparency = 1

DeleteConfirm.DeletionFrameClose:Destroy()

DeleteConfirm.DeletionInnerFrame.Position = UDim2.new(0, 50, 0 ,70)
DeleteConfirm.DeletionInnerFrame.Size = UDim2.new(0, 930, 0, 350)

DeleteConfirm.DeletionInnerFrame.DeletionScrollingFrame.Position = UDim2.new(0, 40, 0, 0)
DeleteConfirm.DeletionInnerFrame.DeletionScrollingFrame.Size = UDim2.new(0, 870, 0, 340)

DeleteConfirm.DeletionInnerFrame.ImageTransparency = 1
DeleteConfirm.DeletionInnerFrame.DeletionScrollingFrame.UIGridLayout.CellPadding = UDim2.new(0, 9, 0, 9)
DeleteConfirm.DeletionInnerFrame.DeletionScrollingFrame.UIGridLayout.CellSize = UDim2.new(0, 70, 0, 70)
DeleteConfirm.DeletionInnerFrame.DeletionScrollingFrame.UIGridLayout.FillDirectionMaxCells = 100


DeleteConfirm.MassDeleteText.Position = UDim2.new(0, 100, 0, -35)
DeleteConfirm.MassDeleteText.Size = UDim2.new(0, 800, 0, 100)

MassDeleteStroke = Instance.new("UIStroke")
MassDeleteStroke.Color = Color3.fromRGB(46, 46, 53)
MassDeleteStroke.Thickness = 3
MassDeleteStroke.Parent = DeleteConfirm.MassDeleteText

UICorner5 = Instance.new("UICorner")
UICorner5.CornerRadius = UDim.new(0, 15)
UICorner5.Parent = DeleteConfirm.MassDeleteNo

UICorner6 = Instance.new("UICorner")
UICorner6.CornerRadius = UDim.new(0, 15)
UICorner6.Parent = DeleteConfirm.MassDeleteYes

DeleteConfirm.MassDeleteYes.BackgroundTransparency = 1
DeleteConfirm.MassDeleteYes.Position = UDim2.new(0, 150, 0, 420)
DeleteConfirm.MassDeleteYes.Size = UDim2.new(0, 300, 0, 60)

MassYesCloseButton = Instance.new("Frame")
MassYesCloseButton.Name = "MassYesCloseButton"
MassYesCloseButton.Size = UDim2.new(0, 300, 0, 60)
MassYesCloseButton.Position = UDim2.new(0, 0, 0, 0)
MassYesCloseButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
MassYesCloseButton.ZIndex = 3
MassYesCloseButton.Parent = DeleteConfirm.MassDeleteYes

MassYesCorner = Instance.new("UICorner")
MassYesCorner.CornerRadius = UDim.new(0, 15)
MassYesCorner.Parent = MassYesCloseButton

MassYesStroke = Instance.new("UIStroke")
MassYesStroke.Color = Color3.fromRGB(142, 0, 34)
MassYesStroke.Thickness = 4
MassYesStroke.Parent = MassYesCloseButton


MassYesCloseGradient = Instance.new("UIGradient")
MassYesCloseGradient.Rotation = 90
MassYesCloseGradient.Color = ColorSequence.new({
ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
ColorSequenceKeypoint.new(1, Color3.fromRGB(150, 13, 35))
})
MassYesCloseGradient.Parent = MassYesCloseButton


DeleteConfirm.MassDeleteNo.BackgroundTransparency = 1
DeleteConfirm.MassDeleteNo.Position = UDim2.new(0, 550, 0, 420)
DeleteConfirm.MassDeleteNo.Size = UDim2.new(0, 300, 0, 60)


MassNoCloseButton = Instance.new("Frame")
MassNoCloseButton.Name = "MassYesCloseButton"
MassNoCloseButton.Size = UDim2.new(0, 300, 0, 60)
MassNoCloseButton.Position = UDim2.new(0, 0, 0, 0)
MassNoCloseButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
MassNoCloseButton.ZIndex = 3
MassNoCloseButton.Parent = DeleteConfirm.MassDeleteNo

MassNoCorner = Instance.new("UICorner")
MassNoCorner.CornerRadius = UDim.new(0, 15)
MassNoCorner.Parent = MassNoCloseButton

MassNoStroke = Instance.new("UIStroke")
MassNoStroke.Color = Color3.fromRGB(190, 150, 18)
MassNoStroke.Thickness = 4
MassNoStroke.Parent = MassNoCloseButton



MassNoCloseGradient = Instance.new("UIGradient")
MassNoCloseGradient.Rotation = 90
MassNoCloseGradient.Color = ColorSequence.new({
ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 170, 0)),
ColorSequenceKeypoint.new(0.8, Color3.fromRGB(220, 147, 0)),
ColorSequenceKeypoint.new(1, Color3.fromRGB(183, 123, 3))
})
MassNoCloseGradient.Parent = MassNoCloseButton




DeleteConfirmFrame = Instance.new("Frame")
DeleteConfirmFrame.Name = "DeleteConfirmFrame"
DeleteConfirmFrame.Size = UDim2.new(0, 1030, 0, 550)
DeleteConfirmFrame.Position = UDim2.new(0, 0, 0, -50)
DeleteConfirmFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
DeleteConfirmFrame.Parent = DeleteConfirm

DeleteConfirmCorner = Instance.new("UICorner")
DeleteConfirmCorner.CornerRadius = UDim.new(0, 25)
DeleteConfirmCorner.Parent = DeleteConfirmFrame

DeleteConfirmStroke = Instance.new("UIStroke")
DeleteConfirmStroke.Color = Color3.fromRGB(46, 46, 53)
DeleteConfirmStroke.Thickness = 5
DeleteConfirmStroke.Parent = DeleteConfirmFrame

DeleteConfirmBackground = Instance.new("ImageLabel")
DeleteConfirmBackground.Name = "DeleteConfirmBackground"
DeleteConfirmBackground.Size = UDim2.new(1, 0, 1, 0)
DeleteConfirmBackground.BackgroundTransparency = 1
DeleteConfirmBackground.Image = "rbxassetid://13581793331"
DeleteConfirmBackground.ImageColor3 = Color3.fromRGB(20, 58, 67)
DeleteConfirmBackground.ImageTransparency = 0.95
DeleteConfirmBackground.ScaleType = Enum.ScaleType.Tile
DeleteConfirmBackground.TileSize = UDim2.new(0, 171, 0, 135)
DeleteConfirmBackground.Parent = DeleteConfirmFrame


DeleteConfirmBackgroundCorner = Instance.new("UICorner")
DeleteConfirmBackgroundCorner.CornerRadius = UDim.new(0, 20)
DeleteConfirmBackgroundCorner.Parent = DeleteConfirmBackground


DeleteConfirmBackgroundGradient = Instance.new("UIGradient")
DeleteConfirmBackgroundGradient.Rotation = -90
DeleteConfirmBackgroundGradient.Color = ColorSequence.new({
ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
})
DeleteConfirmBackgroundGradient.Transparency = NumberSequence.new({
NumberSequenceKeypoint.new(0, 0),
NumberSequenceKeypoint.new(0.31, 0.58),
NumberSequenceKeypoint.new(0.507, 0.757),
NumberSequenceKeypoint.new(0.756, 0.994),
NumberSequenceKeypoint.new(1, 1.29)
})
DeleteConfirmBackgroundGradient.Parent = DeleteConfirmBackground


DeleteConfirmShadowFrame = Instance.new("ImageLabel")
DeleteConfirmShadowFrame.Name = "Shadow"
DeleteConfirmShadowFrame.ZIndex = 0
DeleteConfirmShadowFrame.BackgroundTransparency = 1
DeleteConfirmShadowFrame.Image = "rbxassetid://14001321443"
DeleteConfirmShadowFrame.ImageColor3 = Color3.fromRGB(0, 0, 0)
DeleteConfirmShadowFrame.ImageTransparency = 0.6
DeleteConfirmShadowFrame.Size = UDim2.new(1, 35, 1, 35)
DeleteConfirmShadowFrame.Parent = DeleteConfirmFrame

------------------------------------------------------

PetInvOver.OverlayCancelButton.Position = UDim2.new(0, 315, -0.061, 0)
PetInvOver.OverlayCancelButton.Size = UDim2.new(0, 100, 0, 100)
PetInvOver.OverlayCancelButton.ImageTransparency = 1
PetInvOver.OverlayCancelButton.Rotation = 0

OverlayCloseButton = Instance.new("ImageButton")
OverlayCloseButton.Name = "OverlayCloseButton"
OverlayCloseButton.Size = UDim2.new(0, 100, 0, 75)
OverlayCloseButton.Position = UDim2.new(0, 0, 0, 0)
OverlayCloseButton.BackgroundTransparency = 1
OverlayCloseButton.Image = "rbxassetid://14423621163"
OverlayCloseButton.ImageColor3 = Color3.fromRGB(255, 255, 255)
OverlayCloseButton.ZIndex = 4
OverlayCloseButton.Parent = PetInvOver.OverlayCancelButton

-- Connect the click event
OverlayCloseButton.MouseButton1Click:Connect(function()
    -- Store the original position
    originalPosition = PetInvOver.Position
    
    -- Create a tween to slide to the left
    tweenInfo = TweenInfo.new(
        0.1,                -- Duration (0.5 seconds)
        Enum.EasingStyle.Quad,  -- Easing style
        Enum.EasingDirection.Out -- Easing direction
    )
    
    -- Calculate the target position (move left by the width of the frame plus a bit extra)
    targetPosition = UDim2.new(
        originalPosition.X.Scale - 0.02,  -- Move left by 100% of screen width
        originalPosition.X.Offset,
        originalPosition.Y.Scale,
        originalPosition.Y.Offset
    )
    
    -- Create the tween
    tween = TweenService:Create(
        PetInvOver,
        tweenInfo,
        {Position = targetPosition}
    )
    
    -- Play the tween and set visibility to false when it completes
    tween:Play()
    tween.Completed:Connect(function()
        PetInvOver.Visible = false
        -- Reset position for next time it's shown
        PetInvOver.Position = originalPosition
    end)
end)

OverlayCloseAspectRatio = Instance.new("UIAspectRatioConstraint")
OverlayCloseAspectRatio.Name = "CloseAspectRatio"
OverlayCloseAspectRatio.Parent = OverlayCloseButton


OverlayCloseGradient = Instance.new("UIGradient")
OverlayCloseGradient.Rotation = -90
OverlayCloseGradient.Color = ColorSequence.new({
ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 2, 61)),
ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 39, 125))
})
OverlayCloseGradient.Parent = OverlayCloseButton


OverlayCloseUiScale = Instance.new("UIScale")
OverlayCloseUiScale.Scale = 1
OverlayCloseUiScale.Parent = OverlayCloseButton


OverlayCloseShadow = Instance.new("ImageLabel")
OverlayCloseShadow.Name = "Shadow"
OverlayCloseShadow.Size = UDim2.new(1, 0, 1.1, 0)
OverlayCloseShadow.ImageTransparency = 0.5
OverlayCloseShadow.Position = UDim2.new(0, 0, 0, 0)
OverlayCloseShadow.BackgroundTransparency = 1
OverlayCloseShadow.Image = "rbxassetid://14001321443"
OverlayCloseShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
OverlayCloseShadow.ZIndex = 0
OverlayCloseShadow.Parent = OverlayCloseButton


OverlayCloseTextLabel = Instance.new("TextLabel")
OverlayCloseTextLabel.Name = "X"
OverlayCloseTextLabel.Size = UDim2.new(0.9, 0, 0.6, 0)
OverlayCloseTextLabel.Position = UDim2.new(0.06, 0, 0.2, 0)
OverlayCloseTextLabel.BackgroundTransparency = 1
OverlayCloseTextLabel.Text = "X"
OverlayCloseTextLabel.TextSize = 18
OverlayCloseTextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
OverlayCloseTextLabel.TextScaled = true
OverlayCloseTextLabel.Font = Enum.Font.FredokaOne
OverlayCloseTextLabel.Parent = OverlayCloseButton
OverlayCloseTextLabel.ZIndex = 4

OverlayTextLabelStroke = Instance.new("UIStroke")
OverlayTextLabelStroke.Thickness = 3
OverlayTextLabelStroke.Color = Color3.fromRGB(0, 0, 0)
OverlayTextLabelStroke.Parent = OverlayCloseTextLabel

MassDeleteOverlay.Parent = MainFrame2
MassDeleteOverlay.Size = UDim2.new(0, 350, 0, 170)
MassDeleteOverlay.ImageTransparency = 1
MassDeleteOverlay.Position = UDim2.new(0, 1025, 0, 50)

MassDeleteOverlayFrame = Instance.new("Frame")
MassDeleteOverlayFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
MassDeleteOverlayFrame.Name = "MassDeleteOverlayFrame"
MassDeleteOverlayFrame.Size = UDim2.new(0, 350, 0, 190)
MassDeleteOverlayFrame.Parent = MassDeleteOverlay

-- Connect the click event
MassDeleteOverlay.MassDeleteOverlayYes.MouseButton1Click:Connect(function()
        MassDeleteOverlay.Visible = false
end)

MSDELETEOVERUICorner = Instance.new("UICorner")
MSDELETEOVERUICorner.CornerRadius = UDim.new(0, 15)
MSDELETEOVERUICorner.Parent = MassDeleteOverlayFrame

MSDELETEOVERUIStroke = Instance.new("UIStroke")
MSDELETEOVERUIStroke.Name = "MSDELETEOVERUIStroke"
MSDELETEOVERUIStroke.Color = Color3.fromRGB(46, 46, 53)
MSDELETEOVERUIStroke.Thickness = 5
MSDELETEOVERUIStroke.Parent = MassDeleteOverlayFrame

NoUICorner = Instance.new("UICorner")
NoUICorner.CornerRadius = UDim.new(0, 15)
NoUICorner.Parent = MassDeleteOverlay.MassDeleteOverlayNo

YesUICorner = Instance.new("UICorner")
YesUICorner.CornerRadius = UDim.new(0, 15)
YesUICorner.Parent = MassDeleteOverlay.MassDeleteOverlayYes

MassDeleteOverlay.MassDeleteOverlayYes.Position = UDim2.new(0, 10, 0, 120)
MassDeleteOverlay.MassDeleteOverlayYes.Size = UDim2.new(0, 150, 0, 50)
MassDeleteOverlay.MassDeleteOverlayYes.TextStrokeColor3 = Color3.fromRGB(0, 85, 0)

MassDeleteOverlay.MassDeleteOverlayNo.Position = UDim2.new(0, 190, 0, 120)
MassDeleteOverlay.MassDeleteOverlayNo.Size = UDim2.new(0, 150, 0, 50)
MassDeleteOverlay.MassDeleteOverlayNo.TextStrokeColor3 = Color3.fromRGB(85, 0, 0)

MassDeleteOverlay.MassDeleteOverlayText.TextColor3 = Color3.fromRGB(46, 46, 53)

CloseButton = Instance.new("ImageButton")
CloseButton.Name = "CloseButton"
CloseButton.Size = UDim2.new(1, 0, 0.06, 45)
CloseButton.Position = UDim2.new(0, 960, 0, -25)
CloseButton.BackgroundTransparency = 1
CloseButton.Image = "rbxassetid://14423621163"
CloseButton.ImageColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.Parent = MainFrame2


CloseAspectRatio = Instance.new("UIAspectRatioConstraint")
CloseAspectRatio.Name = "CloseAspectRatio"
CloseAspectRatio.Parent = CloseButton


CloseGradient = Instance.new("UIGradient")
CloseGradient.Rotation = -90
CloseGradient.Color = ColorSequence.new({
ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 2, 61)),
ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 39, 125))
})
CloseGradient.Parent = CloseButton


CloseUiScale = Instance.new("UIScale")
CloseUiScale.Scale = 1
CloseUiScale.Parent = CloseButton


CloseShadow = Instance.new("ImageLabel")
CloseShadow.Name = "Shadow"
CloseShadow.Size = UDim2.new(1, 0, 1.1, 0)
CloseShadow.ImageTransparency = 0.5
CloseShadow.Position = UDim2.new(0, 0, 0, 0)
CloseShadow.BackgroundTransparency = 1
CloseShadow.Image = "rbxassetid://14001321443"
CloseShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
CloseShadow.ZIndex = 0
CloseShadow.Parent = CloseButton


CloseTextLabel = Instance.new("TextLabel")
CloseTextLabel.Name = "X"
CloseTextLabel.Size = UDim2.new(0.9, 0, 0.6, 0)
CloseTextLabel.Position = UDim2.new(0.06, 0, 0.2, 0)
CloseTextLabel.BackgroundTransparency = 1
CloseTextLabel.Text = "X"
CloseTextLabel.TextSize = 18
CloseTextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseTextLabel.TextScaled = true
CloseTextLabel.Font = Enum.Font.FredokaOne
CloseTextLabel.Parent = CloseButton


TextLabelStroke1 = Instance.new("UIStroke")
TextLabelStroke1.Thickness = 3
TextLabelStroke1.Color = Color3.fromRGB(0, 0, 0)
TextLabelStroke1.Parent = CloseTextLabel


Background = Instance.new("ImageLabel")
Background.Name = "Background"
Background.Size = UDim2.new(1, 0, 1, 0)
Background.BackgroundTransparency = 1
Background.Image = "rbxassetid://13581793331"
Background.ImageColor3 = Color3.fromRGB(20, 58, 67)
Background.ImageTransparency = 0.95
Background.ScaleType = Enum.ScaleType.Tile
Background.TileSize = UDim2.new(0, 171, 0, 135)
Background.Parent = MainFrame1


BackgroundCorner = Instance.new("UICorner")
BackgroundCorner.CornerRadius = UDim.new(0, 20)
BackgroundCorner.Parent = Background


BackgroundGradient = Instance.new("UIGradient")
BackgroundGradient.Rotation = -90
BackgroundGradient.Color = ColorSequence.new({
ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
})
BackgroundGradient.Transparency = NumberSequence.new({
NumberSequenceKeypoint.new(0, 0),
NumberSequenceKeypoint.new(0.31, 0.58),
NumberSequenceKeypoint.new(0.507, 0.757),
NumberSequenceKeypoint.new(0.756, 0.994),
NumberSequenceKeypoint.new(1, 1.29)
})
BackgroundGradient.Parent = Background


ShadowFrame1 = Instance.new("ImageLabel")
ShadowFrame1.Name = "Shadow"
ShadowFrame1.ZIndex = -1
ShadowFrame1.BackgroundTransparency = 1
ShadowFrame1.Image = "rbxassetid://14001321443"
ShadowFrame1.ImageColor3 = Color3.fromRGB(0, 0, 0)
ShadowFrame1.ImageTransparency = 0.6
ShadowFrame1.Size = UDim2.new(1, 35, 1, 35)
ShadowFrame1.Parent = MainFrame1


PetLabel = Instance.new("TextLabel")
PetLabel.Name = "PetLabel"
PetLabel.BackgroundTransparency = 1
PetLabel.Size = UDim2.new(0, 300, 0, 100)
PetLabel.Position = UDim2.new(0, 0, 0, -50)
PetLabel.Text = "Pets"
PetLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
PetLabel.TextSize = 100
PetLabel.Font = Enum.Font.FredokaOne
PetLabel.Parent = MainFrame2


PetLabelStroke = Instance.new("UIStroke")
PetLabelStroke.Color = Color3.fromRGB(46, 46, 53)
PetLabelStroke.Thickness = 5
PetLabelStroke.Parent = PetLabel

----------------------------------------------------------------

-- Add the click functionality
UnequipAll.MouseButton1Click:Connect(function()
    -- Get the path to the equipped pets
    player = game:GetService("Players").LocalPlayer
    equippedPetsFrame = player.PlayerGui.MainGui.CenterUIFrame.PetInventory.PetInventoryInnerFrame.MainFrame2.Pets.EquippedPets
    
    -- Get all ImageButtons (pets) in the EquippedPets frame
    equippedPets = {}
    for _, child in pairs(equippedPetsFrame:GetChildren()) do
        if child:IsA("ImageButton") then
            table.insert(equippedPets, child)
        end
    end
    
    -- Remote function reference
    remoteFunction = game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunctions"):WaitForChild("MainRemoteFunction")
    
    -- Unequip each pet
    for _, pet in ipairs(equippedPets) do
        local args = {
            [1] = "DestroyPet",
            [2] = pet.Name
        }
        
        -- Fire the remote for each pet
        remoteFunction:InvokeServer(unpack(args))
        
        -- Optional: Add a small delay to prevent server overload
        task.wait(0.01)
    end
end)


----------------------------------------------------------------


RightUI = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightUIFrame

HUD = Instance.new("Frame")
HUD.Parent = RightUI
HUD.Name = "HUD"
HUD.Position = UDim2.new(0, 740, 0, 250)
HUD.Size = UDim2.new(0, 170, 0, 330)
HUD.BackgroundTransparency = 1

HUDUIListLayout = Instance.new("UIListLayout")
HUDUIListLayout.Parent = HUD
HUDUIListLayout.FillDirection = Enum.FillDirection.Horizontal
HUDUIListLayout.Name = "HUDUIListLayout"
HUDUIListLayout.Padding = UDim.new(0, -5)

HUDUIScale = Instance.new("UIScale")
HUDUIScale.Parent = HUD
HUDUIScale.Scale = 1.25

Bttns1 = Instance.new("Frame")
Bttns1.Parent = HUD
Bttns1.BackgroundTransparency = 1 
Bttns1.Name = "ButtonsFrame1"
Bttns1.AnchorPoint = Vector2.new(0.5, 0.5)
Bttns1.Size = UDim2.new(0, 75, 0, 418)

Bttns2 = Instance.new("Frame")
Bttns2.BackgroundTransparency = 1 
Bttns2.Parent = HUD
Bttns2.Name = "ButtonsFrame2"
Bttns2.AnchorPoint = Vector2.new(0.5, 0.5)
Bttns2.Size = UDim2.new(0, 70, 0, 418)

Bttns1UiListLayout = Instance.new("UIListLayout")
Bttns1UiListLayout.Parent = Bttns1
Bttns1UiListLayout.SortOrder = Enum.SortOrder.Name
Bttns1UiListLayout.Padding = UDim.new(0, -5)
Bttns1UiListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center

Bttns1UIScale = Instance.new("UIScale")
Bttns1UIScale.Parent = Bttns1
Bttns1UIScale.Scale = 1.25

Bttns2UiListLayout = Instance.new("UIListLayout")
Bttns2UiListLayout.Parent = Bttns2
Bttns2UiListLayout.SortOrder = Enum.SortOrder.Name
Bttns2UiListLayout.Padding = UDim.new(0, -5)
Bttns2UiListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center

Bttns2UIScale = Instance.new("UIScale")
Bttns2UIScale.Parent = Bttns2
Bttns2UIScale.Scale = 1.25

RightUI.RanchUpgradeOpen.Parent = Bttns1
HUD.ButtonsFrame1.RanchUpgradeOpen.Name = "0-RanchUpgradeOpen"
HUD.ButtonsFrame1["0-RanchUpgradeOpen"].Size = UDim2.new(0, 70, 0, 70)


RightUI.RebirthOpen.Parent = Bttns1
HUD.ButtonsFrame1.RebirthOpen.Name = "1-RebirthOpen"
HUD.ButtonsFrame1["1-RebirthOpen"].Size = UDim2.new(0, 70, 0, 70)


RightUI.CodeOpen.Parent = Bttns1
HUD.ButtonsFrame1.CodeOpen.Name = "2-CodeOpen"
HUD.ButtonsFrame1["2-CodeOpen"].Size = UDim2.new(0, 70, 0, 70)


RightUI.GiftOpen.Parent = Bttns1
HUD.ButtonsFrame1.GiftOpen.Name = "3-GiftOpen"
HUD.ButtonsFrame1["3-GiftOpen"].Size = UDim2.new(0, 70, 0, 70)


RightUI.ShopOpen.Parent = Bttns2
HUD.ButtonsFrame2.ShopOpen.Name = "1-ShopOpen"
HUD.ButtonsFrame2["1-ShopOpen"].Size = UDim2.new(0, 70, 0, 70)


RightUI.LoginOpen.Parent = Bttns2
HUD.ButtonsFrame2.LoginOpen.Name = "2-LoginOpen"
HUD.ButtonsFrame2["2-LoginOpen"].Size = UDim2.new(0, 70, 0, 70)


RightUI.IndexOpen.Parent = Bttns2
HUD.ButtonsFrame2.IndexOpen.Name = "3-IndexOpen"
HUD.ButtonsFrame2["3-IndexOpen"].Size = UDim2.new(0, 70, 0, 70)


RightUI.SettingsOpen.Parent = Bttns2
HUD.ButtonsFrame2.SettingsOpen.Name = "4-SettingsOpen"
HUD.ButtonsFrame2["4-SettingsOpen"].Size = UDim2.new(0, 70, 0, 70)

----------------------------------------------------------------

                local ButtonManager = {}

                ButtonManager.Buttons = {
                    EquipTopPets = {
                        instance = EquipTopPets,
                        normalColor = Color3.fromRGB(46, 46, 53),
                        hoverColor = Color3.fromRGB(230, 200, 0),
                        transitionDuration = 0.3,
                        isHovering = false,
                        isTransitioning = false,
                        colorTween = nil
                    },
                    
                    ShrinkButton = {
                        instance = ShrinkButton,
                        normalColor = Color3.fromRGB(46, 46, 53),
                        hoverColor = Color3.fromRGB(76, 76, 83),
                        shrunkColor = Color3.fromRGB(0, 166, 242),
                        shrunkHoverColor = Color3.fromRGB(30, 196, 255),
                        transitionDuration = 0.1,
                        isHovering = false,
                        isTransitioning = false,
                        isShrunk = false,
                        colorTween = nil,
                        getTargetColor = function(self)
                            if self.isHovering then
                                return self.isShrunk and self.shrunkHoverColor or self.hoverColor
                            else
                                return self.isShrunk and self.shrunkColor or self.normalColor
                            end
                        end
                    },
                
                    UnequipAll = {
                        instance = UnequipAll,
                        normalColor = Color3.fromRGB(46, 46, 53),
                        hoverColor = Color3.fromRGB(200, 50, 50),
                        transitionDuration = 0.3,
                        isHovering = false,
                        isTransitioning = false,
                        colorTween = nil
                    },
                
                    MassDelete = {
                        instance = MassDelete,
                        normalColor = Color3.fromRGB(46, 46, 53),
                        hoverColor = Color3.fromRGB(100, 200, 100),
                        activeColor = Color3.fromRGB(200, 50, 50), -- Red color when toggled on
                        activeHoverColor = Color3.fromRGB(230, 80, 80), -- Slightly lighter red when hovering in active state
                        transitionDuration = 0.1,
                        isHovering = false,
                        isTransitioning = false,
                        isActive = false, -- New property to track if MassDelete is toggled on
                        colorTween = nil,
                        getTargetColor = function(self)
                            if self.isActive then
                                return self.isHovering and self.activeHoverColor or self.activeColor
                            else
                                return self.isHovering and self.hoverColor or self.normalColor
                            end
                        end
                    },
                    
                    MassNoCloseButton = {
                        instance = MassNoCloseButton,
                        normalColor = Color3.fromRGB(225, 225, 225),
                        hoverColor = Color3.fromRGB(255, 255, 255),
                        transitionDuration = 0.1,
                        isHovering = false,
                        isTransitioning = false,
                        colorTween = nil,
                        isFrame = true
                    },
                
                    MassYesCloseButton = {
                        instance = MassYesCloseButton,
                        normalColor = Color3.fromRGB(225, 225, 225),
                        hoverColor = Color3.fromRGB(255, 255, 255),
                        transitionDuration = 0.1,
                        isHovering = false,
                        isTransitioning = false,
                        colorTween = nil,
                        isFrame = true
                    }
                }
                
                function ButtonManager:getTargetColor(buttonName)
                    local button = self.Buttons[buttonName]
                    
                    if button.getTargetColor then
                        return button:getTargetColor()
                    end
                    
                    if button.isHovering then
                        return button.hoverColor
                    else
                        return button.normalColor
                    end
                end
                
                function ButtonManager:fadeColor(buttonName, targetColor, duration)
                    local button = self.Buttons[buttonName]
                    
                    if button.colorTween then
                        button.colorTween:Cancel()
                        button.colorTween = nil
                    end
                    
                    local colorProperty = button.isFrame and "BackgroundColor3" or "ImageColor3"
                    local startColor = button.instance[colorProperty]
                    local startTime = tick()
                    local runService = game:GetService("RunService")
                    
                    button.isTransitioning = true
                    
                    local connection
                    connection = runService.RenderStepped:Connect(function()
                        local elapsed = tick() - startTime
                        local alpha = math.min(elapsed / duration, 1)
                        
                        alpha = alpha < 0.5 and 2 * alpha * alpha or 1 - math.pow(-2 * alpha + 2, 2) / 2
                        
                        local currentR = startColor.R + (targetColor.R - startColor.R) * alpha
                        local currentG = startColor.G + (targetColor.G - startColor.G) * alpha
                        local currentB = startColor.B + (targetColor.B - startColor.B) * alpha
                        
                        button.instance[colorProperty] = Color3.new(currentR, currentG, currentB)
                        
                        if alpha >= 1 then
                            connection:Disconnect()
                            button.colorTween = nil
                            button.isTransitioning = false
                            
                            local currentTargetColor = self:getTargetColor(buttonName)
                            if button.instance[colorProperty] ~= currentTargetColor then
                                self:fadeColor(buttonName, currentTargetColor, button.transitionDuration)
                            end
                        end
                    end)
                    
                    button.colorTween = {
                        Cancel = function()
                            if connection then
                                connection:Disconnect()
                                button.isTransitioning = false
                            end
                        end
                    }
                end
                
                function ButtonManager:setupHoverEffects(buttonName)
                    local button = self.Buttons[buttonName]
                    
                    button.instance.MouseEnter:Connect(function()
                        button.isHovering = true
                        self:fadeColor(buttonName, self:getTargetColor(buttonName), button.transitionDuration)
                    end)
                    
                    button.instance.MouseLeave:Connect(function()
                        button.isHovering = false
                        self:fadeColor(buttonName, self:getTargetColor(buttonName), button.transitionDuration)
                    end)
                    
                    local colorProperty = button.isFrame and "BackgroundColor3" or "ImageColor3"
                    button.instance[colorProperty] = button.normalColor
                end
                
                function ButtonManager:toggleShrink(buttonName)
                    local button = self.Buttons[buttonName]
                    
                    if button.isShrunk ~= nil then
                        button.isShrunk = not button.isShrunk
                        self:fadeColor(buttonName, self:getTargetColor(buttonName), button.transitionDuration)
                        
                        if button.onShrinkToggle then
                            button:onShrinkToggle()
                        end
                    end
                end
                
                -- New function to toggle MassDelete active state
                function ButtonManager:toggleMassDelete()
                    local button = self.Buttons.MassDelete
                    button.isActive = not button.isActive
                    self:fadeColor("MassDelete", button:getTargetColor(), button.transitionDuration)
                    
                    -- Return the current state so other code can react to it
                    return button.isActive
                end
                
                -- Function to set MassDelete state directly
                function ButtonManager:setMassDeleteActive(active)
                    local button = self.Buttons.MassDelete
                    if button.isActive ~= active then
                        button.isActive = active
                        self:fadeColor("MassDelete", button:getTargetColor(), button.transitionDuration)
                    end
                    return button.isActive
                end
                
                function ButtonManager:initialize()
                    for buttonName, _ in pairs(self.Buttons) do
                        self:setupHoverEffects(buttonName)
                    end
                    
                    if self.Buttons.ShrinkButton then
                        local shrinkButton = self.Buttons.ShrinkButton
                        
                        local petInventoryUIGridLayout = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.PetInventory.PetInventoryInnerFrame.MainFrame2.Pets.PetInventoryScrollingFrame.UIGridLayout
                        
                        petInventoryUIGridLayout.CellSize = UDim2.new(0, 90, 0, 90)
                        
                        shrinkButton.onShrinkToggle = function(self)
                            if self.isShrunk then
                                ButtonManager:transitionGridLayout(
                                    petInventoryUIGridLayout,
                                    UDim2.new(0, 90, 0, 90),
                                    UDim2.new(0, 70, 0, 70),
                                    9,
                                    11,
                                    self.transitionDuration
                                )
                            else
                                ButtonManager:transitionGridLayout(
                                    petInventoryUIGridLayout,
                                    UDim2.new(0, 70, 0, 70),
                                    UDim2.new(0, 90, 0, 90),
                                    11,
                                    9,
                                    self.transitionDuration
                                )
                            end
                        end
                        
                        shrinkButton.instance.MouseButton1Click:Connect(function()
                            if not shrinkButton.isTransitioning then
                                self:toggleShrink("ShrinkButton")
                            end
                        end)
                    end
                    
                    -- Set up MassDelete button click handler
                    if self.Buttons.MassDelete then
                        local massDeleteButton = self.Buttons.MassDelete
                        
                        massDeleteButton.instance.MouseButton1Click:Connect(function()
                            if not massDeleteButton.isTransitioning then
                                local isActive = self:toggleMassDelete()
                                -- Here you can add any additional logic that should happen when MassDelete is toggled
                                -- For example, enabling/disabling delete mode in your pet inventory
                            end
                        end)
                    end
                end
                
                function ButtonManager:transitionGridLayout(gridLayout, startSize, endSize, startCells, endCells, duration)
                    local startTime = tick()
                    local runService = game:GetService("RunService")
                    
                    local connection
                    connection = runService.RenderStepped:Connect(function()
                        local elapsed = tick() - startTime
                        local alpha = math.min(elapsed / duration, 1)
                        
                        alpha = alpha < 0.5 and 2 * alpha * alpha or 1 - math.pow(-2 * alpha + 2, 2) / 2
                        
                        local currentWidth = startSize.X.Offset + (endSize.X.Offset - startSize.X.Offset) * alpha
                        local currentHeight = startSize.Y.Offset + (endSize.Y.Offset - startSize.Y.Offset) * alpha
                        
                        gridLayout.CellSize = UDim2.new(0, currentWidth, 0, currentHeight)
                        
                        if alpha >= 0.5 and gridLayout.FillDirectionMaxCells ~= endCells then
                            gridLayout.FillDirectionMaxCells = endCells
                        end
                        
                        if alpha >= 1 then
                            connection:Disconnect()
                        end
                    end)
                end
                
                function ButtonManager:addButton(name, instance, normalColor, hoverColor, transitionDuration, options)
                    options = options or {}
                    
                    self.Buttons[name] = {
                        instance = instance,
                        normalColor = normalColor,
                        hoverColor = hoverColor,
                        transitionDuration = transitionDuration or 0.1,
                        isHovering = false,
                        isTransitioning = false,
                        colorTween = nil,
                        isFrame = options.isFrame or false
                    }
                    
                    for key, value in pairs(options) do
                        self.Buttons[name][key] = value
                    end
                    
                    self:setupHoverEffects(name)
                    
                    return self.Buttons[name]
                end
                
                ButtonManager:initialize()
                

----------------------------------------------------------------



----------------------------------------------------------------

spawn(function()
    while wait() do
        if MassDelete and MassDelete.ImageColor3 == Color3.fromRGB(255, 255, 255) then
            MassDelete.ImageColor3 = Color3.fromRGB(46, 46, 53)
        end
    end
end)

----------------------------------------------------------------

-- Add this code at the end of your existing script

-- Constants for the CloseButton hover effect
CLOSE_BUTTON_HOVER_DURATION = 0.1
CLOSE_BUTTON_SCALE_NORMAL = 1
CLOSE_BUTTON_SCALE_HOVER = 1.05
CLOSE_BUTTON_ROTATION_NORMAL = 0
CLOSE_BUTTON_ROTATION_HOVER = 5

-- Function to smoothly transition the CloseButton properties
local function transitionCloseButton(startScale, endScale, startRotation, endRotation, duration)
    local startTime = tick()
    local runService = game:GetService("RunService")
    
    -- Store the original position to maintain centering during scaling
    local originalPosition = CloseButton.Position
    
    local connection
    connection = runService.RenderStepped:Connect(function()
        local elapsed = tick() - startTime
        local alpha = math.min(elapsed / duration, 1)
        
        -- Smooth easing function (ease in-out)
        alpha = alpha < 0.5 and 2 * alpha * alpha or 1 - math.pow(-2 * alpha + 2, 2) / 2
        
        -- Interpolate scale
        local currentScale = startScale + (endScale - startScale) * alpha
        CloseUiScale.Scale = currentScale
        
        -- Interpolate rotation
        local currentRotation = startRotation + (endRotation - startRotation) * alpha
        CloseButton.Rotation = currentRotation
        
        if alpha >= 1 then
            connection:Disconnect()
        end
    end)
end

-- Connect hover events to the CloseButton
CloseButton.MouseEnter:Connect(function()
    transitionCloseButton(
        CLOSE_BUTTON_SCALE_NORMAL,
        CLOSE_BUTTON_SCALE_HOVER,
        CLOSE_BUTTON_ROTATION_NORMAL,
        CLOSE_BUTTON_ROTATION_HOVER,
        CLOSE_BUTTON_HOVER_DURATION
    )
end)

CloseButton.MouseLeave:Connect(function()
    transitionCloseButton(
        CLOSE_BUTTON_SCALE_HOVER,
        CLOSE_BUTTON_SCALE_NORMAL,
        CLOSE_BUTTON_ROTATION_HOVER,
        CLOSE_BUTTON_ROTATION_NORMAL,
        CLOSE_BUTTON_HOVER_DURATION
    )
end)


----------------------------------------------------------------

-- Constants for the CloseButton hover effect
CLOSE_OVERLAY_BUTTON_HOVER_DURATION = 0.1
CLOSE_OVERLAY_BUTTON_SCALE_NORMAL = 1
CLOSE_OVERLAY_BUTTON_SCALE_HOVER = 1.05
CLOSE_OVERLAY_BUTTON_ROTATION_NORMAL = 0
CLOSE_OVERLAY_BUTTON_ROTATION_HOVER = 5

-- Function to smoothly transition the CloseButton properties
local function transitionOverlayCloseButton(startScale, endScale, startRotation, endRotation, duration)
    local startTime = tick()
    local runService = game:GetService("RunService")
    
    -- Store the original position to maintain centering during scaling
    local originalPosition = OverlayCloseButton.Position
    
    local connection
    connection = runService.RenderStepped:Connect(function()
        local elapsed = tick() - startTime
        local alpha = math.min(elapsed / duration, 1)
        
        -- Smooth easing function (ease in-out)
        alpha = alpha < 0.5 and 2 * alpha * alpha or 1 - math.pow(-2 * alpha + 2, 2) / 2
        
        -- Interpolate scale
        local currentScale = startScale + (endScale - startScale) * alpha
        OverlayCloseUiScale.Scale = currentScale
        
        -- Interpolate rotation
        local currentRotation = startRotation + (endRotation - startRotation) * alpha
        OverlayCloseButton.Rotation = currentRotation
        
        if alpha >= 1 then
            connection:Disconnect()
        end
    end)
end

-- Connect hover events to the CloseButton
OverlayCloseButton.MouseEnter:Connect(function()
    transitionOverlayCloseButton(
        CLOSE_OVERLAY_BUTTON_SCALE_NORMAL,
        CLOSE_OVERLAY_BUTTON_SCALE_HOVER,
        CLOSE_OVERLAY_BUTTON_ROTATION_NORMAL,
        CLOSE_OVERLAY_BUTTON_ROTATION_HOVER,
        CLOSE_OVERLAY_BUTTON_HOVER_DURATION
    )
end)

OverlayCloseButton.MouseLeave:Connect(function()
    transitionOverlayCloseButton(
        CLOSE_OVERLAY_BUTTON_SCALE_HOVER,
        CLOSE_OVERLAY_BUTTON_SCALE_NORMAL,
        CLOSE_OVERLAY_BUTTON_ROTATION_HOVER,
        CLOSE_OVERLAY_BUTTON_ROTATION_NORMAL,
        CLOSE_OVERLAY_BUTTON_HOVER_DURATION
    )
end)

----------------------------------------------------------------

-- Define tween properties
local hoverInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local originalSize = UDim2.new(0, 70, 0, 70)
local hoverSize = UDim2.new(0, 80, 0, 80)


local function applyHoverEffect(button)
    local hoverTween = TweenService:Create(button, hoverInfo, {Size = hoverSize})
    local unhoverTween = TweenService:Create(button, hoverInfo, {Size = originalSize})
    
    button.MouseEnter:Connect(function()
        hoverTween:Play()
    end)
    
    button.MouseLeave:Connect(function()
        unhoverTween:Play()
    end)
end

local buttonsFrame1 = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightUIFrame.HUD.ButtonsFrame1
for _, button in pairs(buttonsFrame1:GetChildren()) do
    if button:IsA("ImageButton") then
        applyHoverEffect(button)
    end
end

local buttonsFrame2 = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightUIFrame.HUD.ButtonsFrame2
for _, button in pairs(buttonsFrame2:GetChildren()) do
    if button:IsA("ImageButton") then
        applyHoverEffect(button)
    end
end


----------------------------------------------------------------

local originalPosition1 = UDim2.new(0, 0, 0, 125)
local originalPosition2 = UDim2.new(0, -30, 0, 25) -- Different position but same animation style

-- Offscreen positions
local offscreenPosition1 = UDim2.new(0, 0, 0, 350)
local offscreenPosition2 = UDim2.new(0, -30, 0, 350) -- Different position but same animation style

-- Disable existing connections
for _, connection in pairs(getconnections(button.MouseButton1Click)) do
    connection:Disable()
end

for _, connection in pairs(getconnections(CloseButton.MouseButton1Click)) do
    connection:Disable()
end

-- Initialize frames
MainFrame1.Position = offscreenPosition1
MainFrame2.Position = offscreenPosition2
MainFrame1.Visible = false
MainFrame2.Visible = false

-- Tween information - same for both frames
hoverInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
popUpInfo = TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
popDownInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.In)

-- Tween properties
hoverProperties = {Size = UDim2.new(0.44, 0, 0.165, 0)}
originalProperties = {Size = UDim2.new(0.4, 0, 0.15, 0)}
popUpProperties1 = {Position = originalPosition1}
popUpProperties2 = {Position = originalPosition2}
popDownProperties1 = {Position = offscreenPosition1}
popDownProperties2 = {Position = offscreenPosition2}

-- Create tweens
hoverTween = TweenService:Create(button, hoverInfo, hoverProperties)
unhoverTween = TweenService:Create(button, hoverInfo, originalProperties)

-- Same animation style for both frames
popUpTween1 = TweenService:Create(MainFrame1, popUpInfo, popUpProperties1)
popUpTween2 = TweenService:Create(MainFrame2, popUpInfo, popUpProperties2)
popDownTween1 = TweenService:Create(MainFrame1, popDownInfo, popDownProperties1)
popDownTween2 = TweenService:Create(MainFrame2, popDownInfo, popDownProperties2)

-- Button hover effects
button.MouseEnter:Connect(function()
    hoverTween:Play()
end)

button.MouseLeave:Connect(function()
    unhoverTween:Play()
end)

-- Button click handler
button.MouseButton1Click:Connect(function()
    if isInventoryOpen then
        -- Close animation
        popDownTween1:Play()
        popDownTween2:Play()
        
        task.wait(0.1)
        
        PetInv.Visible = false
        MainFrame1.Visible = false
        MainFrame2.Visible = false
    else
        -- Reset positions
        MainFrame1.Position = offscreenPosition1
        MainFrame2.Position = offscreenPosition2
        
        -- Show frames
        PetInv.Visible = true
        MainFrame1.Visible = true
        MainFrame2.Visible = true
        
        -- Open animation
        popUpTween1:Play()
        popUpTween2:Play()
    end
    
    isInventoryOpen = not isInventoryOpen
end)

-- Close button handler
CloseButton.MouseButton1Click:Connect(function()
    if isInventoryOpen then
        -- Close animation
        popDownTween1:Play()
        popDownTween2:Play()
        
        task.wait(0.1)
        
        PetInv.Visible = false
        MainFrame1.Visible = false
        MainFrame2.Visible = false
        
        isInventoryOpen = false
    end
end)



----------------------------------------------------------------

CONFIG = {
    checkInterval = 0.5,
    originalImageId = "rbxassetid://3319539600",
    replacementImageId = "rbxassetid://111266790123938",
    paths = {
        game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.PetInventory.PetInventoryInnerFrame.MainFrame2.Pets.EquippedPets,
        game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.PetInventory.PetInventoryInnerFrame.MainFrame2.Pets.PetInventoryScrollingFrame,
        game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.PetInventory.DeletionFrame.DeletionInnerFrame.DeletionScrollingFrame
    },
    colors = {
        Common = Color3.fromRGB(148, 148, 148),
        Uncommon = Color3.fromRGB(126, 255, 173),
        Rare = Color3.fromRGB(5, 138, 255),
        Epic = Color3.fromRGB(255, 0, 201)
    },
    colorCycleSpeed = 1 -- Higher = faster color cycling
}

CommonIds = {
	"rbxassetid://3321300808", --["Blue Butterfly"] // rarity = "Common"
    "rbxassetid://3319895658", --["White Cat"] // rarity = "Common"
    "rbxassetid://3324883683", --["Shiny Sweets Bat"] // rarity = "Common"
    "rbxassetid://3321328407", --["Snow Fox"] // rarity = "Common"
    "rbxassetid://3321301027", --["Shiny Blue Butterfly"] // rarity = "Common"
    "rbxassetid://3319957680", --["Shiny White Cat"] // rarity = "Common"
    "rbxassetid://3324884414", --["Sweets Bat"] // rarity = "Common"
    "rbxassetid://3710867266", --["Shiny Red Butterfly"] // rarity = "Common"
    "rbxassetid://3321273272", --["Shiny Wolf"] // rarity = "Common"
    "rbxassetid://3321272769", --["Ice Cat"] // rarity = "Common"
    "rbxassetid://3321273354", --["Wolf"] // rarity = "Common"
    "rbxassetid://3321396991", --["Shiny Polar Bear"] // rarity = "Common"
    "rbxassetid://3321301083", --["Shiny Brown Fox"] // rarity = "Common"
    "rbxassetid://3321300887", --["Brown Fox"] // rarity = "Common"
    "rbxassetid://3321273075", --["Shiny Ice Cat"] // rarity = "Common"
    "rbxassetid://3321273024", --["Shiny Bat"] // rarity = "Common"
    "rbxassetid://3319957578", --["Shiny Fox"] // rarity = "Common"
    "rbxassetid://3321328346", --["Shiny Snow Fox"] // rarity = "Common"
    "rbxassetid://3319895844", --["Fox"] // rarity = "Common"
    "rbxassetid://3321396625", --["Polar Bear"] // rarity = "Common"
    "rbxassetid://3319957475", --["Shiny Dog"] // rarity = "Common"
    "rbxassetid://3319895754", --["Dog"] // rarity = "Common"
    "rbxassetid://3324853749", --["Lucky Cat"] // rarity = "Common"
    "rbxassetid://3321272690", --["Bat"] // rarity = "Common"
    "rbxassetid://3321327915", --["Red Butterfly"] // rarity = "Common"
}
UncommonIds = {
    "rbxassetid://3321470334", --["Shiny Tuxedo Cat"] // rarity = "Uncommon"
    "rbxassetid://3319895561", --["Bunny"] // rarity = "Uncommon"
    "rbxassetid://3321470447", --["Tuxedo Cat"] // rarity = "Uncommon"
    "rbxassetid://3321273142", --["Shiny Ruby Bunny"] // rarity = "Uncommon"
    "rbxassetid://3321469337", --["Slime"] // rarity = "Uncommon"
    "rbxassetid://3324883581", --["Shiny Polka Dot Butterfly"] // rarity = "Uncommon"
    "rbxassetid://3321328173", --["Shiny Midnight Cat"] // rarity = "Uncommon"
    "rbxassetid://3321327798", --["Midnight Cat"] // rarity = "Uncommon"
    "rbxassetid://3321468618", --["Deer"] // rarity = "Uncommon"
    "rbxassetid://3324853925", --["Shamrock Fox"] // rarity = "Uncommon"
    "rbxassetid://3326596100", --["Youtube Cat"] // rarity = "Uncommon"
    "rbxassetid://3321468985", --["Shiny Deer"] // rarity = "Uncommon"
    "rbxassetid://3321469262", --["Shiny Slime"] // rarity = "Uncommon"
    "rbxassetid://3321272831", --["Ruby Bunny"] // rarity = "Uncommon"
    "rbxassetid://3319957364", --["Shiny Bunny"] // rarity = "Uncommon"
    "rbxassetid://3321396365", --["Brown Wolf"] // rarity = "Uncommon"
    "rbxassetid://3324883483", --["Polka Dot Butterfly"] // rarity = "Uncommon"
    "rbxassetid://3321396725", --["Shiny Brown Wolf"] // rarity = "Uncommon"
    "rbxassetid://3321301205", --["Shiny Stone Dog"] // rarity = "Uncommon"
    "rbxassetid://3321301417", --["Stone Dog"] // rarity = "Uncommon"
}
RareIds = {
    "rbxassetid://3652596139", --["Moonlight Sphinx"] // rarity = "Rare"
    "rbxassetid://3321301540", --["Vampire Bat"] // rarity = "Rare"
    "rbxassetid://3324821828", --["Shiny Dwarf"] // rarity = "Rare"
    "rbxassetid://3324793842", --["Yeti"] // rarity = "Rare"
    "rbxassetid://3321396923", --["Shiny Frozen Wolf"] // rarity = "Rare"
    "rbxassetid://4147751076", --["Shiny Candy Corn Bat"] // rarity = "Rare"
    "rbxassetid://3326474870", --["Golden Cat"] // rarity = "Rare"
    "rbxassetid://3321470382", --["Squid"] // rarity = "Rare"
    "rbxassetid://3326474965", --["Golden Dog"] // rarity = "Rare"
    "rbxassetid://3324770144", --["Shiny Pegasus"] // rarity = "Rare"
    "rbxassetid://3877247625", --["Shiny Jellyfish"] // rarity = "Rare"
    "rbxassetid://3877248666", --["Turkey"] // rarity = "Rare"
    "rbxassetid://3324793682", --["Shiny Yeti"] // rarity = "Rare"
    "rbxassetid://3652596213", --["Mossy Golem"] // rarity = "Rare"
    "rbxassetid://3877246998", --["Jellyfish"] // rarity = "Rare"
    "rbxassetid://3324883891", --["Shiny Dogbun"] // rarity = "Rare"
    "rbxassetid://3321468858", --["Robot"] // rarity = "Rare"
    "rbxassetid://3326595568", --["6M Baby Phoenix"] // rarity = "Rare"
    "rbxassetid://3321301348", --["Shiny Vampire Bat"] // rarity = "Rare"
    "rbxassetid://3321471795", --["Shiny Horse"] // rarity = "Rare"
    "rbxassetid://3324770240", --["Shiny Phoenix"] // rarity = "Rare"
    "rbxassetid://3326595635", --["10M Party Angel"] // rarity = "Rare"
    "rbxassetid://4147749952", --["Candy Corn Bat"] // rarity = "Rare"
    "rbxassetid://3321471442", --["Horse"] // rarity = "Rare"
    "rbxassetid://3324820925", --["Basilisk"] // rarity = "Rare"
    "rbxassetid://3324769317", --["Demon Dragon"] // rarity = "Rare"
    "rbxassetid://3324821534", --["Shiny Basilisk"] // rarity = "Rare"
    "rbxassetid://3321470734", --["Shiny Lava Slime"] // rarity = "Rare"
    "rbxassetid://3321328040", --["Shiny Flame Butterfly"] // rarity = "Rare"
    "rbxassetid://3326595872", --["Promo Mouse"] // rarity = "Rare"
    "rbxassetid://3326595985", --["Shiny Baby Serpent"] // rarity = "Rare"
    "rbxassetid://3877248140", --["Shiny Turkey"] // rarity = "Rare"
    "rbxassetid://3324770445", --["Pegasus"] // rarity = "Rare"
    "rbxassetid://4147750685", --["Pumpkin"] // rarity = "Rare"
    "rbxassetid://3321470797", --["Shiny Squid"] // rarity = "Rare"
    "rbxassetid://3324793773", --["Troll"] // rarity = "Rare"
    "rbxassetid://3321327655", --["Flame Butterfly"] // rarity = "Rare"
    "rbxassetid://3324769842", --["Shiny Demon Dragon"] // rarity = "Rare"
    "rbxassetid://3321469868", --["Lava Slime"] // rarity = "Rare"
    "rbxassetid://3326595696", --["30M Mouse"] // rarity = "Rare"
    "rbxassetid://3324854567", --["Spring Unicorn"] // rarity = "Rare"
    "rbxassetid://3324882989", --["Dogbun"] // rarity = "Rare"
    "rbxassetid://3324793579", --["Shiny Troll"] // rarity = "Rare"
    "rbxassetid://3321469214", --["Shiny Robot"] // rarity = "Rare"
    "rbxassetid://3324821169", --["Dwarf"] // rarity = "Rare"
    "rbxassetid://3326595937", --["20M Demon"] // rarity = "Rare"
    "rbxassetid://3321273211", --["Shiny Sapphire Bunny"] // rarity = "Rare"
    "rbxassetid://3319957269", --["Shiny Awesome Dog"] // rarity = "Rare"
    "rbxassetid://3471250118", --["Shiny Dalmation"] // rarity = "Rare"
    "rbxassetid://3652596602", --["Shiny Mossy Golem"] // rarity = "Rare"
    "rbxassetid://3324769540", --["Phoenix"] // rarity = "Rare"
    "rbxassetid://3324792831", --["Griffin"] // rarity = "Rare"
    "rbxassetid://3324793264", --["Shiny Griffin"] // rarity = "Rare"
    "rbxassetid://3319895464", --["Awesome Dog"] // rarity = "Rare"
    "rbxassetid://3652596501", --["Shiny Moonlight Sphinx"] // rarity = "Rare"
    "rbxassetid://3471251013", --["Lightspeed Bee"] // rarity = "Rare"
    "rbxassetid://3321472084", --["Shiny Turtle"] // rarity = "Rare"
    "rbxassetid://3321272890", --["Sapphire Bunny"] // rarity = "Rare"
    "rbxassetid://4147751762", --["Shiny Pumpkin"] // rarity = "Rare"
    "rbxassetid://3471249515", --["Dalmation"] // rarity = "Rare"
    "rbxassetid://3471250205", --["Shiny Lightspeed Bee"] // rarity = "Rare"
    "rbxassetid://3321472257", --["Turtle"] // rarity = "Rare"
    "rbxassetid://3321396571", --["Frozen Wolf"] // rarity = "Rare"
    "rbxassetid://3326595503", --["1M Baby Serpent"] // rarity = "Rare"
    "rbxassetid://3326569961", --["Shiny Party Fox"] // rarity = "Rare"
    "rbxassetid://3326569235", --["Firework Mouse"] // rarity = "Rare"
    "rbxassetid://3326569795", --["Shiny Firework Mouse"] // rarity = "Rare"
    "rbxassetid://3326569354", --["Party Fox"] // rarity = "Rare"

}
EpicIds = {
    "rbxassetid://3324770049", --["Shiny Nova Fox"] // rarity = "Epic"
    "rbxassetid://3471249879", --["Shiny Deep Sea Narwhal"] // rarity = "Epic"
    "rbxassetid://3321301144", --["Shiny Midnight Bat"] // rarity = "Epic"
    "rbxassetid://3326569102", --["Disco Robot"] // rarity = "Epic"
    "rbxassetid://3324883798", --["Shiny Bunny Lord"] // rarity = "Epic"
    "rbxassetid://3321272615", --["Angel Dog"] // rarity = "Epic"
    "rbxassetid://4147751883", --["Shiny Scarecrow"] // rarity = "Epic"
    "rbxassetid://3324882897", --["Bunny Lord"] // rarity = "Epic"
    "rbxassetid://3324822172", --["Thunderbird"] // rarity = "Epic"
    "rbxassetid://4147751353", --["Shiny Ghoul"] // rarity = "Epic"
    "rbxassetid://3321328221", --["Shiny Panda"] // rarity = "Epic"
    "rbxassetid://4147750803", --["Scarecrow"] // rarity = "Epic"
    "rbxassetid://3324883391", --["Eggster Flock"] // rarity = "Epic"
    "rbxassetid://4147750270", --["Ghoul"] // rarity = "Epic"
    "rbxassetid://3321471682", --["Shiny Direwolf"] // rarity = "Epic"
    "rbxassetid://3321396849", --["Shiny Dark Unicorn"] // rarity = "Epic"
    "rbxassetid://3326569673", --["Shiny Disco Robot"] // rarity = "Epic"
    "rbxassetid://3324822097", --["Shiny Thunderbird"] // rarity = "Epic"
    "rbxassetid://3326595809", --["40M Light Leviathan"] // rarity = "Epic"
    "rbxassetid://3324853584", --["Celtic Owl"] // rarity = "Epic"
    "rbxassetid://3321327860", --["Panda"] // rarity = "Epic"
    "rbxassetid://3321472023", --["Shiny Thieving Crows"] // rarity = "Epic"
    "rbxassetid://3321470190", --["Shiny Monkey"] // rarity = "Epic"
    "rbxassetid://3471250281", --["Shiny Nesting Eagles"] // rarity = "Epic"
    "rbxassetid://3326568936", --["Cake"] // rarity = "Epic"
    "rbxassetid://3321396499", --["Dark Unicorn"] // rarity = "Epic"
    "rbxassetid://3321471266", --["Direwolf"] // rarity = "Epic"
    "rbxassetid://3321396301", --["Black Bear"] // rarity = "Epic"
    "rbxassetid://3321471568", --["Moonbear"] // rarity = "Epic"
    "rbxassetid://3324793165", --["Shiny Fairy"] // rarity = "Epic"
    "rbxassetid://3324792743", --["Fairy"] // rarity = "Epic"
    "rbxassetid://3321396676", --["Shiny Black Bear"] // rarity = "Epic"
    "rbxassetid://3471249956", --["Shiny Cherry Blossom Owl"] // rarity = "Epic"
    "rbxassetid://3326570094", --["Shiny Wonderful Present"] // rarity = "Epic"
    "rbxassetid://3321300956", --["Midnight Bat"] // rarity = "Epic"
    "rbxassetid://3476136313", --["Cherry Blossom Owl"] // rarity = "Epic"
    "rbxassetid://3321272961", --["Shiny Angel Dog"] // rarity = "Epic"
    "rbxassetid://3321469162", --["Shiny Owl"] // rarity = "Epic"
    "rbxassetid://3324884316", --["Shiny Eggster Flock"] // rarity = "Epic"
    "rbxassetid://3324822013", --["Shiny Roc"] // rarity = "Epic"
    "rbxassetid://3321472197", --["Thieving Crows"] // rarity = "Epic"
    "rbxassetid://3877248536", --["Tropical Monkey"] // rarity = "Epic"
    "rbxassetid://3324770888", --["Nova Fox"] // rarity = "Epic"
    "rbxassetid://3877246745", --["Ember Mouse"] // rarity = "Epic"
    "rbxassetid://3321469928", --["Monkey"] // rarity = "Epic"
    "rbxassetid://3321468801", --["Owl"] // rarity = "Epic"
    "rbxassetid://3652597250", --["Sprite Swarm"] // rarity = "Epic"
    "rbxassetid://3652596829", --["Shiny Sprite Swarm"] // rarity = "Epic"
    "rbxassetid://3321468736", --["Narwhal"] // rarity = "Epic"
    "rbxassetid://3321469728", --["Bee"] // rarity = "Epic"
    "rbxassetid://3554077778", --["Speckled Rabbit"] // rarity = "Epic"
    "rbxassetid://3326493843", --["Galaxy Dragon"] // rarity = "Epic"
    "rbxassetid://3321470062", --["Shiny Bee"] // rarity = "Epic"
    "rbxassetid://3471249598", --["Deep Sea Narwhal"] // rarity = "Epic"
    "rbxassetid://3471249738", --["Nesting Eagles"] // rarity = "Epic"
    "rbxassetid://3324821342", --["Roc"] // rarity = "Epic"
    "rbxassetid://3321471903", --["Shiny Moonbear"] // rarity = "Epic"
    "rbxassetid://3877248031", --["Shiny Tropical Monkey"] // rarity = "Epic"
    "rbxassetid://3321469102", --["Shiny Narwhal"] // rarity = "Epic"
    "rbxassetid://3326569532", --["Shiny Cake"] // rarity = "Epic"
    "rbxassetid://3326570157", --["Wonderful Present"] // rarity = "Epic"
    "rbxassetid://3554077156", --["Calico Cat"] // rarity = "Epic"
    "rbxassetid://3877247400", --["Shiny Ember Mouse"] // rarity = "Epic"
}
LegendaryIds = {
    "rbxassetid://3554077323", --["Grim Demonlord"] // rarity = "Legendary"
    "rbxassetid://3971551900", --["80M DJ Eagle"] // rarity = "Legendary"
    "rbxassetid://3321471512", --["Inferno Serpent"] // rarity = "Legendary"
    "rbxassetid://3877247741", --["Shiny Lightning Satyr"] // rarity = "Legendary"
    "rbxassetid://3652596913", --["Shiny Warped Wraith"] // rarity = "Legendary"
    "rbxassetid://3324822252", --["Wisp"] // rarity = "Legendary"
    "rbxassetid://3324884225", --["Shiny Eggiverse"] // rarity = "Legendary"
    "rbxassetid://3321468917", --["Shiny Angel"] // rarity = "Legendary"
    "rbxassetid://3971551745", --["80M Golden Sun Eagle"] // rarity = "Legendary"
    "rbxassetid://3326475264", --["Satyr"] // rarity = "Legendary"
    "rbxassetid://3471250459", --["Shiny Snow Elemental"] // rarity = "Legendary"
    "rbxassetid://3877247131", --["Lightning Satyr"] // rarity = "Legendary"
    "rbxassetid://3699317740", --["70M Overcharged Alicorn"] // rarity = "Legendary"
    "rbxassetid://3321397110", --["Vampire Dragon"] // rarity = "Legendary"
    "rbxassetid://3326474675", --["Alicorn"] // rarity = "Legendary"
    "rbxassetid://3321397063", --["Shiny Vampire Dragon"] // rarity = "Legendary"
    "rbxassetid://3321301489", --["Unicorn"] // rarity = "Legendary"
    "rbxassetid://4315140017", --["90M Phoenix Flock"] // rarity = "Legendary"
    "rbxassetid://3326475188", --["Luminous Fox"] // rarity = "Legendary"
    "rbxassetid://3471249272", --["60M Chaotic Thunderbird"] // rarity = "Legendary"
    "rbxassetid://3321327577", --["Android Dragon"] // rarity = "Legendary"
    "rbxassetid://3326569423", --["Phantom Cerberus"] // rarity = "Legendary"
    "rbxassetid://3472078786", --["60M Digital Thunderbird"] // rarity = "Legendary"
    "rbxassetid://3324821610", --["Shiny Cthulhu"] // rarity = "Legendary"
    "rbxassetid://4147751493", --["Shiny Horror Serpent"] // rarity = "Legendary"
    "rbxassetid://3554077394", --["Grotto Butterfly"] // rarity = "Legendary"
    "rbxassetid://3326595761", --["50M Albatross King"] // rarity = "Legendary"
    "rbxassetid://3652596423", --["100K Likes Glacial Serpent"] // rarity = "Legendary"
    "rbxassetid://3319625280", --["50M Albatross God"] // rarity = "Legendary"
    "rbxassetid://3326596048", --["Shiny Baby Sowopent"] // rarity = "Legendary"
    "rbxassetid://3324769459", --["Monster Fox"] // rarity = "Legendary"
    "rbxassetid://3326569181", --["Emperor"] // rarity = "Legendary"
    "rbxassetid://3652597389", --["Warped Wraith"] // rarity = "Legendary"
    "rbxassetid://3554077588", --["Radioactive Monster Fox"] // rarity = "Legendary"
    "rbxassetid://3471249433", --["Corrosive Phoenix"] // rarity = "Legendary"
    "rbxassetid://3321328105", --["Shiny Flame Fox"] // rarity = "Legendary"
    "rbxassetid://3321396441", --["Cerberus"] // rarity = "Legendary"
    "rbxassetid://3321469672", --["Alien"] // rarity = "Legendary"
    "rbxassetid://3321471848", --["Shiny Inferno Serpent"] // rarity = "Legendary"
    "rbxassetid://3877247269", --["Shiny Ancient Earth Dragon"] // rarity = "Legendary"
    "rbxassetid://3324792629", --["Chimera"] // rarity = "Legendary"
    "rbxassetid://3321327975", --["Shiny Android Dragon"] // rarity = "Legendary"
    "rbxassetid://4315302022", --["90M Blackhole Phoenix"] // rarity = "Legendary"
    "rbxassetid://3877246877", --["Guardian Angel"] // rarity = "Legendary"
    "rbxassetid://3321472311", --["Void Gazer"] // rarity = "Legendary"
    "rbxassetid://3324769635", --["Ruler"] // rarity = "Legendary"
    "rbxassetid://3471249810", --["Radiance"] // rarity = "Legendary"
    "rbxassetid://3652596674", --["Shiny Rift Observer"] // rarity = "Legendary"
    "rbxassetid://3321470132", --["Shiny Ice Phoenix"] // rarity = "Legendary"
    "rbxassetid://3324821754", --["Shiny Duality"] // rarity = "Legendary"
    "rbxassetid://3321469058", --["Shiny Demon"] // rarity = "Legendary"
    "rbxassetid://3324769191", --["Dark Serpent"] // rarity = "Legendary"
    "rbxassetid://3326570020", --["Shiny Phantom Cerberus"] // rarity = "Legendary"
    "rbxassetid://3326569738", --["Shiny Emperor"] // rarity = "Legendary"
    "rbxassetid://3652596742", --["Shiny Singularity"] // rarity = "Legendary"
    "rbxassetid://3321471739", --["Shiny Flare Alicorn"] // rarity = "Legendary"
    "rbxassetid://4147749761", --["Alchemist"] // rarity = "Legendary"
    "rbxassetid://3324769737", --["Shiny Dark Serpent"] // rarity = "Legendary"
    "rbxassetid://4147750409", --["Horror Serpent"] // rarity = "Legendary"
    "rbxassetid://3321471318", --["Flare Alicorn"] // rarity = "Legendary"
    "rbxassetid://3471250372", --["Shiny Radiance"] // rarity = "Legendary"
    "rbxassetid://3324883194", --["Easter Serpent"] // rarity = "Legendary"
    "rbxassetid://3326474785", --["Dark Phoenix"] // rarity = "Legendary"
    "rbxassetid://3471250034", --["Shiny Corrosive Phoenix"] // rarity = "Legendary"
    "rbxassetid://3471250541", --["Snow Elemental"] // rarity = "Legendary"
    "rbxassetid://3326475334", --["Sphinx"] // rarity = "Legendary"
    "rbxassetid://3321396783", --["Shiny Cerberus"] // rarity = "Legendary"
    "rbxassetid://3554077680", --["Sky Unicorn"] // rarity = "Legendary"
    "rbxassetid://3321469803", --["Ice Phoenix"] // rarity = "Legendary"
    "rbxassetid://3324769949", --["Shiny Monster Fox"] // rarity = "Legendary"
    "rbxassetid://3321468679", --["Demon"] // rarity = "Legendary"
    "rbxassetid://3699317919", --["70M Soundwave Alicorn"] // rarity = "Legendary"
    "rbxassetid://3324854479", --["Leprechaun"] // rarity = "Legendary"
    "rbxassetid://3877247516", --["Shiny Guardian Angel"] // rarity = "Legendary"
    "rbxassetid://3324793394", --["Shiny Leviathan"] // rarity = "Legendary"
    "rbxassetid://3324883284", --["Eggiverse"] // rarity = "Legendary"
    "rbxassetid://3324853833", --["Rainbow Elementals"] // rarity = "Legendary"
    "rbxassetid://3652597129", --["Singularity"] // rarity = "Legendary"
    "rbxassetid://3324884140", --["Shiny Easter Serpent"] // rarity = "Legendary"
    "rbxassetid://3656843464", --["Rift Observer"] // rarity = "Legendary"
    "rbxassetid://3321468526", --["Angel"] // rarity = "Legendary"
    "rbxassetid://3324770355", --["Shiny Ruler"] // rarity = "Legendary"
    "rbxassetid://3554077482", --["Omega Gazer"] // rarity = "Legendary"
    "rbxassetid://3326475117", --["Imp"] // rarity = "Legendary"
    "rbxassetid://3324793074", --["Shiny Chimera"] // rarity = "Legendary"
    "rbxassetid://3554077246", --["Elemental Chimera"] // rarity = "Legendary"
    "rbxassetid://3324821000", --["Cthulhu"] // rarity = "Legendary"
    "rbxassetid://3321301272", --["Shiny Unicorn"] // rarity = "Legendary"
    "rbxassetid://3554077861", --["Zeta Alien"] // rarity = "Legendary"
    "rbxassetid://3324821447", --["Shiny Wisp"] // rarity = "Legendary"
    "rbxassetid://4147750931", --["Shiny Alchemist"] // rarity = "Legendary"
    "rbxassetid://3321469993", --["Shiny Alien"] // rarity = "Legendary"
    "rbxassetid://3321472138", --["Shiny Void Gazer"] // rarity = "Legendary"
    "rbxassetid://3321327717", --["Flame Fox"] // rarity = "Legendary"
    "rbxassetid://3326475396", --["Gargoyle"] // rarity = "Legendary"
    "rbxassetid://3324792977", --["Leviathan"] // rarity = "Legendary"
    "rbxassetid://3877246549", --["Ancient Earth Dragon"] // rarity = "Legendary"
    "rbxassetid://3324821083", --["Duality"] // rarity = "Legendary"

}
EzLegendaryIds = {
    "rbxassetid://2867903124", --["Unicorn"] // rarity = "Legendary"
	"rbxassetid://2867899126", --["Android Dragon"] // rarity = "Legendary"
	"rbxassetid://2867901873", --["Flame Fox"] // rarity = "Legendary"
	"rbxassetid://2867903314", --["Vampire Dragon"] // rarity = "Legendary"
	"rbxassetid://2867902389", --["Monster Fox"] // rarity = "Legendary"
	"rbxassetid://2868554099", --["Dark Serpent"] // rarity = "Legendary"
	"rbxassetid://2912788391", --["Dark Phoenix"] // rarity = "Legendary"
	"rbxassetid://2911048050", --["Luminous Fox"] // rarity = "Legendary"
	"rbxassetid://1249021641", --["Phowoenix"] // rarity = "Legendary"
	"rbxassetid://3877246877", --["Guardian Angel"] // rarity = "Legendary"
	"rbxassetid://3656843464", --["Rift Observer"] // rarity = "Legendary"
	"rbxassetid://3652596674", --["Shiny Rift Observer"] // rarity = "Legendary"
	"rbxassetid://3652597129", --["Singularity"] // rarity = "Legendary"
	"rbxassetid://3652597389", --["Warped Wraith"] // rarity = "Legendary"
    "rbxassetid://3319539600", --["Shiny Ancient Earth Dragon"] // rarity = "Legendary"
    "rbxassetid://3319539600", --["Shiny Singularity"] // rarity = "Legendary"
    "rbxassetid://3319539600", --["Shiny Lightning Satyr"] // rarity = "Legendary"
}

-- Combine all legendary IDs
for _, id in ipairs(EzLegendaryIds) do
    table.insert(LegendaryIds, id)
end

-- Keep track of buttons we've already processed
processedButtons = {}
colorCycleConnections = {}

-- Function to determine pet rarity based on image ID
local function getPetRarity(imageId)
    -- Check each rarity table
    for _, id in ipairs(CommonIds) do
        if id == imageId then return "Common" end
    end
    
    for _, id in ipairs(UncommonIds) do
        if id == imageId then return "Uncommon" end
    end
    
    for _, id in ipairs(RareIds) do
        if id == imageId then return "Rare" end
    end
    
    for _, id in ipairs(EpicIds) do
        if id == imageId then return "Epic" end
    end
    
    for _, id in ipairs(LegendaryIds) do
        if id == imageId then return "Legendary" end
    end
    
    return "Common" -- Default to Common if not found
end

-- Function to check if a button has the target image
local function hasTargetImage(button)
    return button.Image == CONFIG.originalImageId
end

-- Function to create or get the replacement ImageLabel
local function createReplacementImage(button)
    -- Check if button already has a replacement image
    local existingImage = button:FindFirstChild("ReplacementImage")
    if not existingImage then
        -- Create a new ImageLabel
        imageLabel = Instance.new("ImageLabel")
        imageLabel.Name = "ReplacementImage"
        imageLabel.Size = UDim2.new(1, 0, 1, 0)
        imageLabel.Position = UDim2.new(0, 0, 0, 0)
        imageLabel.BackgroundTransparency = 1
        imageLabel.Image = CONFIG.replacementImageId
        imageLabel.ScaleType = button.ScaleType
        imageLabel.SliceCenter = button.SliceCenter
        imageLabel.SliceScale = button.SliceScale
        imageLabel.ZIndex = button.ZIndex
        imageLabel.Parent = button
        
        existingImage = imageLabel
    end
    
    return existingImage
end

-- Function to apply a smooth RGB color cycle for legendary pets
local function applyLegendaryCycle(button, imageLabel)
    -- Remove any existing connection
    if colorCycleConnections[button] then
        colorCycleConnections[button]:Disconnect()
        colorCycleConnections[button] = nil
    end
    
    -- Set up the color cycle
    local r, g, b = 255, 0, 0
    local phase = 0
    -- Phases: 0 = R->255, G->0->255, B->0
    --         1 = R->255->0, G->255, B->0
    --         2 = R->0, G->255, B->0->255
    --         3 = R->0, G->255->0, B->255
    --         4 = R->0->255, G->0, B->255
    --         5 = R->255, G->0, B->255->0
    
    local connection = game:GetService("RunService").Heartbeat:Connect(function()
        if not imageLabel or not imageLabel.Parent then
            if colorCycleConnections[button] then
                colorCycleConnections[button]:Disconnect()
                colorCycleConnections[button] = nil
            end
            return
        end
        
        -- Update color based on current phase
        local step = CONFIG.colorCycleSpeed
        
        if phase == 0 then
            -- R=255, G increasing, B=0
            g = g + step
            if g >= 255 then
                g = 255
                phase = 1
            end
        elseif phase == 1 then
            -- G=255, R decreasing, B=0
            r = r - step
            if r <= 0 then
                r = 0
                phase = 2
            end
        elseif phase == 2 then
            -- R=0, G=255, B increasing
            b = b + step
            if b >= 255 then
                b = 255
                phase = 3
            end
        elseif phase == 3 then
            -- R=0, B=255, G decreasing
            g = g - step
            if g <= 0 then
                g = 0
                phase = 4
            end
        elseif phase == 4 then
            -- R increasing, G=0, B=255
            r = r + step
            if r >= 255 then
                r = 255
                phase = 5
            end
        elseif phase == 5 then
            -- R=255, G=0, B decreasing
            b = b - step
            if b <= 0 then
                b = 0
                phase = 0
            end
        end
        
        -- Clamp values to valid range
        r = math.clamp(r, 0, 255)
        g = math.clamp(g, 0, 255)
        b = math.clamp(b, 0, 255)
        
        -- Apply the new color
        imageLabel.ImageColor3 = Color3.fromRGB(r, g, b)
    end)
    
    colorCycleConnections[button] = connection
end

-- Function to apply the appropriate color based on rarity
local function applyRarityColor(button, rarity, imageLabel)
    if rarity == "Legendary" then
        applyLegendaryCycle(button, imageLabel)
    else
        -- For non-legendary pets, set a solid color
        imageLabel.ImageColor3 = CONFIG.colors[rarity]
        
        -- Remove any existing color cycle connection
        if colorCycleConnections[button] then
            colorCycleConnections[button]:Disconnect()
            colorCycleConnections[button] = nil
        end
    end
end

-- Function to process a button
local function processButton(button)
    if processedButtons[button] then return end
    
    -- Make the original button image transparent
    button.ImageTransparency = 1
    
    -- Create the replacement image
    replacementImage = createReplacementImage(button)
    
    -- Look for PetImage child
    petImage = button:FindFirstChild("PetImage")
    if petImage and petImage:IsA("ImageButton") then
        rarity = getPetRarity(petImage.Image)
        
        -- Apply color based on rarity
        applyRarityColor(button, rarity, replacementImage)
        
    else
        -- Default to Common if no pet image found
        replacementImage.ImageColor3 = CONFIG.colors.Common
    end
    
    processedButtons[button] = true
end

-- Function to scan a container for ImageButtons
local function scanContainer(container)
    for _, child in pairs(container:GetChildren()) do
        if child:IsA("ImageButton") and hasTargetImage(child) then
            processButton(child)
        end
        
        -- Also check any descendants that might be ImageButtons
        for _, descendant in pairs(child:GetDescendants()) do
            if descendant:IsA("ImageButton") and hasTargetImage(descendant) then
                processButton(descendant)
            end
        end
    end
end

-- Function to handle when new children are added to a container
local function setupChildAddedListener(container)
    container.ChildAdded:Connect(function(child)
        -- Check if the new child is an ImageButton
        if child:IsA("ImageButton") and hasTargetImage(child) then
            processButton(child)
        end
        
        -- Also set up listeners for any descendants
        child.DescendantAdded:Connect(function(descendant)
            if descendant:IsA("ImageButton") and hasTargetImage(descendant) then
                processButton(descendant)
            end
        end)
    end)
end

-- Function to clean up connections when objects are removed
local function setupRemovalListeners()
    game:GetService("Players").LocalPlayer.PlayerGui.DescendantRemoving:Connect(function(instance)
        if colorCycleConnections[instance] then
            colorCycleConnections[instance]:Disconnect()
            colorCycleConnections[instance] = nil
        end
        
        if processedButtons[instance] then
            processedButtons[instance] = nil
        end
    end)
end

-- Main function
local function startImageReplacer()
    -- Set up cleanup for color cycle effects
    setupRemovalListeners()
    
    -- Initial scan of all containers
    for _, container in ipairs(CONFIG.paths) do
        scanContainer(container)
        setupChildAddedListener(container)
    end
    
    -- Set up a loop to periodically check for new buttons
    while true do
        wait(CONFIG.checkInterval)
        
        for _, container in ipairs(CONFIG.paths) do
            scanContainer(container)
        end
    end
end

-- Start the image replacer
spawn(startImageReplacer)


----------------------------SORTER------------------------------

-- Function to determine rarity based on image ID
local function getRarityFromImageId(imageId)
    for _, id in ipairs(CommonIds) do
        if imageId == id then return "Common", 6 end
    end
    
    for _, id in ipairs(UncommonIds) do
        if imageId == id then return "Uncommon", 5 end
    end
    
    for _, id in ipairs(RareIds) do
        if imageId == id then return "Rare", 4 end
    end
    
    for _, id in ipairs(EpicIds) do
        if imageId == id then return "Epic", 3 end
    end
    
    for _, id in ipairs(LegendaryIds) do
        if imageId == id then return "Legendary", 2 end
    end
    
    for _, id in ipairs(EzLegendaryIds) do
        if imageId == id then return "EzLegendary", 1 end
    end
    
    return "Unknown", 7
end

-- Function to add rarity attribute to pet buttons
local function addRarityAttributeToPets()
    -- Process pets in PetInventoryScrollingFrame
    for _, petButton in pairs(PetScroll:GetChildren()) do
        if petButton:IsA("ImageButton") and petButton:FindFirstChild("PetImage") then
            petImage = petButton.PetImage
            imageId = petImage.Image
            rarityName, rarityValue = getRarityFromImageId(imageId)
            
            -- Set attributes
            petButton:SetAttribute("Rarity", rarityName)
            petButton:SetAttribute("RarityValue", rarityValue)
            
            -- Optional: Add visual indicator of rarity
            if not petButton:FindFirstChild("RarityLabel") then
                rarityLabel = Instance.new("TextLabel")
                rarityLabel.Name = "RarityLabel"
                rarityLabel.Size = UDim2.new(1, 0, 0, 20)
                rarityLabel.Position = UDim2.new(0, 0, 0, 0)
                rarityLabel.BackgroundTransparency = 0.5
                rarityLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                rarityLabel.TextSize = 12
                rarityLabel.Text = rarityName
                rarityLabel.ZIndex = 2
                rarityLabel.Parent = petButton
                
                -- Color based on rarity
                if rarityName == "Common" then
                    rarityLabel.BackgroundColor3 = Color3.fromRGB(150, 150, 150)
                    rarityLabel.BackgroundTransparency = 1
                elseif rarityName == "Uncommon" then
                    rarityLabel.BackgroundColor3 = Color3.fromRGB(0, 180, 0)
                    rarityLabel.BackgroundTransparency = 1
                elseif rarityName == "Rare" then
                    rarityLabel.BackgroundColor3 = Color3.fromRGB(0, 112, 221)
                    rarityLabel.BackgroundTransparency = 1
                elseif rarityName == "Epic" then
                    rarityLabel.BackgroundColor3 = Color3.fromRGB(163, 53, 238)
                    rarityLabel.BackgroundTransparency = 1
                elseif rarityName == "Legendary" then
                    rarityLabel.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
                    rarityLabel.BackgroundTransparency = 1
                elseif rarityName == "EzLegendary" then
                    rarityLabel.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                    rarityLabel.BackgroundTransparency = 1
                end
            end
        end
    end
    
    -- Process pets in EquippedPets
    for _, petButton in pairs(EquippedPets:GetChildren()) do
        if petButton:IsA("ImageButton") and petButton:FindFirstChild("PetImage") then
            petImage = petButton.PetImage
            imageId = petImage.Image
            rarityName, rarityValue = getRarityFromImageId(imageId)
            
            -- Set attributes
            petButton:SetAttribute("Rarity", rarityName)
            petButton:SetAttribute("RarityValue", rarityValue)
            
            -- Optional: Add visual indicator of rarity
            if not petButton:FindFirstChild("RarityLabel") then
                rarityLabel = Instance.new("TextLabel")
                rarityLabel.Name = "RarityLabel"
                rarityLabel.Size = UDim2.new(1, 0, 0, 20)
                rarityLabel.Position = UDim2.new(0, 0, 0, 0)
                rarityLabel.BackgroundTransparency = 1
                rarityLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                rarityLabel.TextSize =0
                rarityLabel.Text = rarityName
                rarityLabel.ZIndex = 2
                rarityLabel.Parent = petButton
                
                -- Color based on rarity
                if rarityName == "Common" then
                    rarityLabel.BackgroundColor3 = Color3.fromRGB(150, 150, 150)
                    rarityLabel.BackgroundTransparency = 1
                elseif rarityName == "Uncommon" then
                    rarityLabel.BackgroundColor3 = Color3.fromRGB(0, 180, 0)
                    rarityLabel.BackgroundTransparency = 1
                elseif rarityName == "Rare" then
                    rarityLabel.BackgroundColor3 = Color3.fromRGB(0, 112, 221)
                    rarityLabel.BackgroundTransparency = 1
                elseif rarityName == "Epic" then
                    rarityLabel.BackgroundColor3 = Color3.fromRGB(163, 53, 238)
                    rarityLabel.BackgroundTransparency = 1
                elseif rarityName == "Legendary" then
                    rarityLabel.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
                    rarityLabel.BackgroundTransparency = 1
                elseif rarityName == "EzLegendary" then
                    rarityLabel.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                    rarityLabel.BackgroundTransparency = 1
                end
            end
        end
    end
end

-- Function to sort pets by rarity
local function sortPetsByRarity()
    -- Sort pets in PetInventoryScrollingFrame
    petButtons = {}
    for _, petButton in pairs(PetScroll:GetChildren()) do
        if petButton:IsA("ImageButton") then
            table.insert(petButtons, petButton)
        end
    end
    
    -- Sort by rarity value (lowest first - EzLegendary=1, Legendary=2, etc.)
    table.sort(petButtons, function(a, b)
        aRarity = a:GetAttribute("RarityValue") or 7
        bRarity = b:GetAttribute("RarityValue") or 7
        return aRarity < bRarity
    end)
    
    -- Reorder in the UI
    for i, petButton in ipairs(petButtons) do
        petButton.LayoutOrder = i
    end
    
    -- Sort pets in EquippedPets
    equippedPetButtons = {}
    for _, petButton in pairs(EquippedPets:GetChildren()) do
        if petButton:IsA("ImageButton") then
            table.insert(equippedPetButtons, petButton)
        end
    end
    
    -- Sort by rarity value (lowest first)
    table.sort(equippedPetButtons, function(a, b)
        aRarity = a:GetAttribute("RarityValue") or 7
        bRarity = b:GetAttribute("RarityValue") or 7
        return aRarity < bRarity
    end)
    
    -- Reorder in the UI
    for i, petButton in ipairs(equippedPetButtons) do
        petButton.LayoutOrder = i
    end
end

-- Create a UIListLayout for PetInventoryScrollingFrame if it doesn't exist
local function ensureUIListLayout()
    if not PetScroll:FindFirstChildOfClass("UIListLayout") then
        listLayout = Instance.new("UIListLayout")
        listLayout.SortOrder = Enum.SortOrder.LayoutOrder
        listLayout.Parent = PetScroll
    end
    
    if not EquippedPets:FindFirstChildOfClass("UIListLayout") then
        listLayout = Instance.new("UIListLayout")
        listLayout.SortOrder = Enum.SortOrder.LayoutOrder
        listLayout.Parent = EquippedPets
    end
end

-- Override the game's sorting functions
local function overrideSortingFunctions()
    -- Create a flag to track if we're currently sorting
    isSorting = false
    
    -- Function to handle when the inventory is updated
    local function handleInventoryUpdate()
        if isSorting then return end
        isSorting = true
        
        -- Wait a moment for the game to finish its updates
        task.wait(0.1)
        
        -- Apply our sorting
        addRarityAttributeToPets()
        sortPetsByRarity()
        
        isSorting = false
    end
    
    -- Connect to relevant events
    PetScroll.ChildAdded:Connect(function()
        handleInventoryUpdate()
    end)
    
    PetScroll.ChildRemoved:Connect(function()
        handleInventoryUpdate()
    end)
    
    EquippedPets.ChildAdded:Connect(function()
        handleInventoryUpdate()
    end)
    
    EquippedPets.ChildRemoved:Connect(function()
        handleInventoryUpdate()
    end)
    
    -- Set up a periodic check to ensure our sorting is maintained
    task.spawn(function()
        while true do
            task.wait(1)
            handleInventoryUpdate()
        end
    end)
    
    -- Try to hook into the game's UI buttons that might trigger sorting
    for _, button in pairs(MainFrame2:GetDescendants()) do
        if button:IsA("TextButton") or button:IsA("ImageButton") then
            button.MouseButton1Click:Connect(function()
                -- Wait a moment for the game's sorting to complete
                task.wait(0.2)
                handleInventoryUpdate()
            end)
        end
    end
end

-- Run the functions initially
ensureUIListLayout()
addRarityAttributeToPets()
sortPetsByRarity()
overrideSortingFunctions()

----------------------------------------------------------------

-- Break all existing connections on the button
for _, connection in pairs(getconnections(EquipTopPets.MouseButton1Click)) do
    connection:Disconnect()
end

-- Create a new connection
EquipTopPets.MouseButton1Click:Connect(function()
    -- Set all direct ImageButton children's ImageColor3 to white
    petsContainer = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.PetInventory.PetInventoryInnerFrame.MainFrame2.Pets.PetInventoryScrollingFrame
    
    if petsContainer then
        -- Loop through only the direct children
        for _, child in pairs(petsContainer:GetChildren()) do
            -- Check if the child is an ImageButton
            if child:IsA("ImageButton") then
                child.ImageColor3 = Color3.new(1, 1, 1) -- RGB 255, 255, 255 (white)
            end
        end
        
        -- Fire the remote function
        local args = {
            [1] = "EquipTopPets"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunctions"):WaitForChild("MainRemoteFunction"):InvokeServer(unpack(args))
    else
    end
end)


----------------------------------------------------------------

UpgradeRanch.UpgradeRanchFrameClose:Destroy()
UpgradeRanch.RanchUpgradeShadow:Destroy()
UpgradeRanchButton.Position = UDim2.new(0.131999999, 0, 0.754000008, 0)

UpgradeRanch.ImageTransparency = 1
UpgradeRanch.ImageColor3 = Color3.fromRGB(255, 255, 255)
UpgradeRanch.Position = UDim2.new(0.093, 0, 0.138, 0)
UpgradeRanch.Size = UDim2.new(0.846, 0, 0.524, 0)

UpgradeFrameHUD = Instance.new("Frame")
UpgradeFrameHUD.BackgroundTransparency = 1
UpgradeFrameHUD.Name = "UpgradeFrameHUD"
UpgradeFrameHUD.Size = UDim2.new(0, 815, 0, 535)
UpgradeFrameHUD.Parent = UpgradeRanch

UpgradeRanch.Arrow.Parent = UpgradeFrameHUD
game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.UpgradeRanchFrame:GetChildren()[5].Parent = UpgradeFrameHUD
game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.UpgradeRanchFrame.RanchImage.Parent = UpgradeFrameHUD
UpgradeRanch.RanchMaxUpgradeFrame.Parent = UpgradeFrameHUD
UpgradeRanch.DragonCapAfter.Parent = UpgradeFrameHUD
UpgradeRanch.DragonCapBefore.Parent = UpgradeFrameHUD
game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.UpgradeRanchFrame.RanchUpgrade.Parent = UpgradeFrameHUD
UpgradeRanch.ReturningText1.Parent = UpgradeFrameHUD

UpgRanchFrame = Instance.new("Frame")
UpgRanchFrame.Name = "UpgRanchFrame"
UpgRanchFrame.Parent = UpgradeFrameHUD
UpgRanchFrame.Position = UDim2.new(0,0,0,0)
UpgRanchFrame.Size = UDim2.new(0, 812, 0, 535)
UpgRanchFrame.BackgroundColor3 = Color3.fromRGB(255,255,255)

UpgUICorner = Instance.new("UICorner")
UpgUICorner.Name = "UpgUICorner"
UpgUICorner.Parent = UpgRanchFrame
UpgUICorner.CornerRadius = UDim.new(0, 25)

UpgUIStroke = Instance.new("UIStroke")
UpgUIStroke.Name = "UpgUIStroke"
UpgUIStroke.Parent = UpgRanchFrame
UpgUIStroke.Color = Color3.fromRGB(46,46,53)
UpgUIStroke.Thickness = 5

UpgBackground = Instance.new("ImageLabel")
UpgBackground.Name = "UpgBackground"
UpgBackground.Size = UDim2.new(1, 0, 1, 0)
UpgBackground.BackgroundTransparency = 1
UpgBackground.Image = "rbxassetid://90803316340171"
UpgBackground.ImageColor3 = Color3.fromRGB(20, 58, 67)
UpgBackground.ImageTransparency = 0.95
UpgBackground.ScaleType = Enum.ScaleType.Tile
UpgBackground.TileSize = UDim2.new(0, 90, 0, 90)
UpgBackground.Parent = UpgRanchFrame


UpgBackgroundGradient = Instance.new("UIGradient")
UpgBackgroundGradient.Rotation = -90
UpgBackgroundGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
})

UpgBackgroundGradient.Transparency = NumberSequence.new({
NumberSequenceKeypoint.new(0, 0),
NumberSequenceKeypoint.new(0.30, 0.60),
NumberSequenceKeypoint.new(0.5, 0.760),
NumberSequenceKeypoint.new(0.76, 1),
NumberSequenceKeypoint.new(1, 1.30)
})
UpgBackgroundGradient.Parent = UpgBackground

----------------------------Arrow------------------------------------

UpgradeRanchArrow.Position = UDim2.new(0, 370, 0, 170)
UpgradeRanchArrow.Image = "rbxassetid://93870057009442"

UpgRanchArrowGradient = Instance.new("UIGradient")
UpgRanchArrowGradient.Rotation = -90
UpgRanchArrowGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 170, 255)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 94, 137))
})

UpgRanchArrowGradient.Parent = UpgradeRanchArrow

----------------------------CloseBttn------------------------------------

UpgRanchCloseButton = Instance.new("ImageButton")
UpgRanchCloseButton.ZIndex = 4
UpgRanchCloseButton.Name = "UpgRanchCloseButton"
UpgRanchCloseButton.Size = UDim2.new(1, 0, 0.06, 45)
UpgRanchCloseButton.Position = UDim2.new(0, 770, 0, -30)
UpgRanchCloseButton.BackgroundTransparency = 1
UpgRanchCloseButton.Image = "rbxassetid://14423621163"
UpgRanchCloseButton.ImageColor3 = Color3.fromRGB(255, 255, 255)
UpgRanchCloseButton.Parent = UpgRanchFrame


UpgRanchCloseAspectRatio = Instance.new("UIAspectRatioConstraint")
UpgRanchCloseAspectRatio.Name = "CloseAspectRatio"
UpgRanchCloseAspectRatio.Parent = UpgRanchCloseButton


UpgRanchCloseGradient = Instance.new("UIGradient")
UpgRanchCloseGradient.Rotation = -90
UpgRanchCloseGradient.Color = ColorSequence.new({
ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 2, 61)),
ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 39, 125))
})
UpgRanchCloseGradient.Parent = UpgRanchCloseButton


UpgRanchCloseUiScale = Instance.new("UIScale")
UpgRanchCloseUiScale.Scale = 1
UpgRanchCloseUiScale.Parent = UpgRanchCloseButton


UpgRanchCloseShadow = Instance.new("ImageLabel")
UpgRanchCloseShadow.Name = "Shadow"
UpgRanchCloseShadow.Size = UDim2.new(1, 0, 1.1, 0)
UpgRanchCloseShadow.ImageTransparency = 0.5
UpgRanchCloseShadow.Position = UDim2.new(0, 0, 0, 0)
UpgRanchCloseShadow.BackgroundTransparency = 1
UpgRanchCloseShadow.Image = "rbxassetid://14001321443"
UpgRanchCloseShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
UpgRanchCloseShadow.ZIndex = 0
UpgRanchCloseShadow.Parent = UpgRanchCloseButton


UpgRanchCloseTextLabel = Instance.new("TextLabel")
UpgRanchCloseTextLabel.ZIndex = 4
UpgRanchCloseTextLabel.Name = "X"
UpgRanchCloseTextLabel.Size = UDim2.new(0.9, 0, 0.6, 0)
UpgRanchCloseTextLabel.Position = UDim2.new(0.06, 0, 0.2, 0)
UpgRanchCloseTextLabel.BackgroundTransparency = 1
UpgRanchCloseTextLabel.Text = "X"
UpgRanchCloseTextLabel.TextSize = 18
UpgRanchCloseTextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
UpgRanchCloseTextLabel.TextScaled = true
UpgRanchCloseTextLabel.Font = Enum.Font.FredokaOne
UpgRanchCloseTextLabel.Parent = UpgRanchCloseButton


UpgRanchTextLabelStroke1 = Instance.new("UIStroke")
UpgRanchTextLabelStroke1.Thickness = 3
UpgRanchTextLabelStroke1.Color = Color3.fromRGB(0, 0, 0)
UpgRanchTextLabelStroke1.Parent = UpgRanchCloseTextLabel

----------------------------------------------------------------



----------------------------RanchImages---------------------

UpgradeRanchImage1Gradient = Instance.new("UIGradient")
UpgradeRanchImage1Gradient.Rotation = 90
UpgradeRanchImage1Gradient.Color = ColorSequence.new({
ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
ColorSequenceKeypoint.new(1, Color3.fromRGB(130, 130, 130))
})
UpgradeRanchImage1Gradient.Parent = UpgradeRanchImage1


UpgradeRanchImage2Gradient = Instance.new("UIGradient")
UpgradeRanchImage2Gradient.Rotation = 90
UpgradeRanchImage2Gradient.Color = ColorSequence.new({
ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
ColorSequenceKeypoint.new(1, Color3.fromRGB(130, 130, 130))
})
UpgradeRanchImage2Gradient.Parent = UpgradeRanchImage2


------------------------------------------------------------

RanchMaxUpgradeFrame.ImageTransparency = 1
RanchMaxUpgradeFrame.BackgroundTransparency = 1
RanchMaxUpgradeFrame.Position = UDim2.new(0, 225, 0, 550)

RanchMaxUpgradeFrame2 = Instance.new("Frame")
RanchMaxUpgradeFrame2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
RanchMaxUpgradeFrame2.Size = UDim2.new(0, 360, 0, 90)
RanchMaxUpgradeFrame2.Parent = RanchMaxUpgradeFrame

MaxUpgUICorner = Instance.new("UICorner")
MaxUpgUICorner.CornerRadius = UDim.new(0, 15)
MaxUpgUICorner.Parent = RanchMaxUpgradeFrame2

MaxUpgUIStroke = Instance.new("UIStroke")
MaxUpgUIStroke.Color = Color3.fromRGB(46, 46, 53)
MaxUpgUIStroke.Thickness = 5
MaxUpgUIStroke.Parent = RanchMaxUpgradeFrame2

MaxUpgBackground = Instance.new("ImageLabel")
MaxUpgBackground.Name = "MaxUpgBackground"
MaxUpgBackground.Size = UDim2.new(1, 0, 1, 0)
MaxUpgBackground.BackgroundTransparency = 1
MaxUpgBackground.Image = "rbxassetid://90803316340171"
MaxUpgBackground.ImageColor3 = Color3.fromRGB(0, 0, 0)
MaxUpgBackground.ImageTransparency = 0.90
MaxUpgBackground.ScaleType = Enum.ScaleType.Tile
MaxUpgBackground.TileSize = UDim2.new(0, 40, 0, 40)
MaxUpgBackground.Parent = RanchMaxUpgradeFrame2


MaxUpgBackgroundGradient = Instance.new("UIGradient")
MaxUpgBackgroundGradient.Rotation = -90
MaxUpgBackgroundGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
})

MaxUpgBackgroundGradient.Transparency = NumberSequence.new({
NumberSequenceKeypoint.new(0, 0),
NumberSequenceKeypoint.new(0.30, 0.60),
NumberSequenceKeypoint.new(0.5, 0.760),
NumberSequenceKeypoint.new(0.76, 1),
NumberSequenceKeypoint.new(1, 1.30)
})
MaxUpgBackgroundGradient.Parent = MaxUpgBackground

RanchMaxUpgradeBox = RanchMaxUpgradeFrame.RanchMaxUpgradeBox

RanchMaxUpgradeBox.Image = "rbxassetid://119214585520707"
RanchMaxUpgradeBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
RanchMaxUpgradeBox.Position = UDim2.new(0.03, 0, 0.105, 0)
RanchMaxUpgradeBox.Size = UDim2.new(0, 70, 0, 70)

MaxUpgBoxUICorner = Instance.new("UICorner")
MaxUpgBoxUICorner.CornerRadius = UDim.new(0, 15)
MaxUpgBoxUICorner.Parent = RanchMaxUpgradeBox

MaxUpgBoxUGradient = Instance.new("UIGradient")
MaxUpgBoxUGradient.Rotation = 90
MaxUpgBoxUGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(193, 193, 193))
})


MaxUpgBoxUGradient.Parent = RanchMaxUpgradeBox

MaxUpgBoxFrame = Instance.new("Frame")
MaxUpgBoxFrame.ZIndex = 4
MaxUpgBoxFrame.AnchorPoint = Vector2.new(0.5, 0.5)
MaxUpgBoxFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
MaxUpgBoxFrame.BackgroundTransparency = 1
MaxUpgBoxFrame.Position = UDim2.new(0, 35, 0, 35)
MaxUpgBoxFrame.Size = UDim2.new(0.6, 0, 0.6, 0)
MaxUpgBoxFrame.Parent = RanchMaxUpgradeBox

MaxUpgBoxFrameUICorner = Instance.new("UICorner")
MaxUpgBoxFrameUICorner.CornerRadius = UDim.new(0, 5)
MaxUpgBoxFrameUICorner.Parent = MaxUpgBoxFrame

MaxUpgBoxFrameUIStroke = Instance.new("UIStroke")
MaxUpgBoxFrameUIStroke.Color = Color3.fromRGB(46, 46, 53)
MaxUpgBoxFrameUIStroke.Thickness = 5
MaxUpgBoxFrameUIStroke.Parent = MaxUpgBoxFrame

------------------------------------------------------------

UpgradeRanchButton.BackgroundTransparency = 1

UpgRanchBttnFrame = Instance.new("Frame")
UpgRanchBttnFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
UpgRanchBttnFrame.ZIndex = 2
UpgRanchBttnFrame.Size = UDim2.new(0, 589, 0, 93)
UpgRanchBttnFrame.Parent = UpgradeRanchButton

UpgRanchBttnUICorner = Instance.new("UICorner")
UpgRanchBttnUICorner.CornerRadius = UDim.new(0, 20)
UpgRanchBttnUICorner.Parent = UpgRanchBttnFrame


UpgRanchBttnUIGradient = Instance.new("UIGradient")
UpgRanchBttnUIGradient.Rotation = 90
UpgRanchBttnUIGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 255, 170)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 143, 88))
})

UpgRanchBttnUIGradient.Parent = UpgRanchBttnFrame


UpgRanchBttnUIStroke = Instance.new("UIStroke")
UpgRanchBttnUIStroke.Color = Color3.fromRGB(0, 212, 131)
UpgRanchBttnUIStroke.Thickness = 4
UpgRanchBttnUIStroke.Parent = UpgRanchBttnFrame

--------------------------UpgRanchText--------------------------------

UpgRanchText.TextColor3 = Color3.fromRGB(255, 255, 255)

UpgRanchTextUIStroke = Instance.new("UIStroke")
UpgRanchTextUIStroke.Color = Color3.fromRGB(46, 46, 53)
UpgRanchTextUIStroke.Thickness = 3
UpgRanchTextUIStroke.Parent = UpgRanchText


--------------------------HoverFunc----------------------------------

-- Constants for the CloseButton hover effect
UpgRanchHoverDuration = 0.1
UpgRanchNormalScale = 1
UpgRanchHoverScale = 1.05
UpgRanchNormalRotation = 0
UpgRanchHoverRotation = 5

-- Function to smoothly transition the CloseButton properties
local function transitionCloseButton(startScale, endScale, startRotation, endRotation, duration)
    local startTime = tick()
    local runService = game:GetService("RunService")
    
    -- Store the original position to maintain centering during scaling
    local originalPosition = UpgRanchCloseButton.Position
    
    local connection
    connection = runService.RenderStepped:Connect(function()
        local elapsed = tick() - startTime
        local alpha = math.min(elapsed / duration, 1)
        
        -- Smooth easing function (ease in-out)
        alpha = alpha < 0.5 and 2 * alpha * alpha or 1 - math.pow(-2 * alpha + 2, 2) / 2
        
        -- Interpolate scale
        local currentScale = startScale + (endScale - startScale) * alpha
        UpgRanchCloseUiScale.Scale = currentScale
        
        -- Interpolate rotation
        local currentRotation = startRotation + (endRotation - startRotation) * alpha
        UpgRanchCloseButton.Rotation = currentRotation
        
        if alpha >= 1 then
            connection:Disconnect()
        end
    end)
end

-- Connect hover events to the CloseButton
UpgRanchCloseButton.MouseEnter:Connect(function()
    transitionCloseButton(
        UpgRanchNormalScale,
        UpgRanchHoverScale,
        UpgRanchNormalRotation,
        UpgRanchHoverRotation,
        UpgRanchHoverDuration
    )
end)

UpgRanchCloseButton.MouseLeave:Connect(function()
    transitionCloseButton(
        UpgRanchHoverScale,
        UpgRanchNormalScale,
        UpgRanchHoverRotation,
        UpgRanchNormalRotation,
        UpgRanchHoverDuration
    )
end)


----------------------------------------------------------------

local originalPosition1 = UDim2.new(0, 0, 0, 0)
local offscreenPosition2 = UDim2.new(0, 0, 0, 100)

-- Disable existing connections
for _, connection in pairs(getconnections(HUD.ButtonsFrame1["0-RanchUpgradeOpen"].MouseButton1Click)) do
    connection:Disable()
end

-- Initialize frame
UpgradeFrameHUD.Position = offscreenPosition2
UpgradeFrameHUD.Visible = false

-- Tween information
local popUpInfo = TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
local popDownInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.In)

-- Tween properties
local popUpProperties = {Position = originalPosition1}
local popDownProperties = {Position = offscreenPosition2}

-- Create tweens
local popUpTween1 = TweenService:Create(UpgradeFrameHUD, popUpInfo, popUpProperties)
local popDownTween1 = TweenService:Create(UpgradeFrameHUD, popDownInfo, popDownProperties)

-- Connect event (only once)
HUD.ButtonsFrame1["0-RanchUpgradeOpen"].MouseButton1Click:Connect(function()
    if isRanchOpen then
        popDownTween1:Play()
        
        task.wait(0.1)
        
        UpgradeRanch.Visible = false
        UpgradeFrameHUD.Visible = false
    else
        UpgradeFrameHUD.Position = offscreenPosition2
        
        UpgradeRanch.Visible = true
        UpgradeFrameHUD.Visible = true
        
        popUpTween1:Play()
    end
    
    isRanchOpen = not isRanchOpen
end)



----------------------------------------------------------------

UpgRanchCloseButton.MouseButton1Click:Connect(function()
    originalPosition = UpgradeRanch.Position
    
    -- Create a tween to slide to the left
    tweenInfo = TweenInfo.new(
        0.1,                -- Duration (0.5 seconds)
        Enum.EasingStyle.Quad,  -- Easing style
        Enum.EasingDirection.Out -- Easing direction
    )
    
    -- Calculate the target position (move left by the width of the frame plus a bit extra)
    targetPosition = UDim2.new(
        originalPosition.X.Scale,  -- Move left by 100% of screen width
        originalPosition.X.Offset,
        originalPosition.Y.Scale + 0.02,
        originalPosition.Y.Offset
    )
    
    -- Create the tween
    tween = TweenService:Create(
        UpgradeRanch,
        tweenInfo,
        {Position = targetPosition}
    )
    
    -- Play the tween and set visibility to false when it completes
    tween:Play()
    tween.Completed:Connect(function()
        UpgradeRanch.Visible = false
        isRanchOpen = false
        -- Reset position for next time it's shown
        UpgradeRanch.Position = originalPosition
    end)
end)

----------------------------------------------------------------

deleteLabel = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CenterUIFrame.PetInventory.PetInventoryInnerFrame.MainFrame2.DeleteLabel

-- Path to the UIGridLayout to check CellSize
uiGridLayout = PetScroll.UIGridLayout

-- Target colors to check for
yellowColor = Color3.fromRGB(255, 255, 127) -- Color for equipped pets
whiteColor = Color3.fromRGB(255, 255, 255) -- Color for unequipped pets
greenColor = Color3.fromRGB(135, 255, 183) -- Color for selected pets
redColor = Color3.fromRGB(255, 86, 80) -- New color to check for delete functionality

-- Variables to track the previous TextLabel text
previousTextLabelText = ""
previousTextLabelNumber = 0

-- Variable to track the previous CellSize
previousCellSize = nil

-- Table to keep track of buttons with cloned DeleteLabels
buttonsWithDeleteLabel = {}

-- Fixed size for shadows in EquippedPets
EQUIPPED_SHADOW_SIZE = UDim2.new(0, 90, 0, 90)

-- Function to check if paths exist
local function checkPaths()
    if not PetScroll or not PetScroll:FindFirstAncestor("PlayerGui") then
        warn("Inventory path not found, waiting...")
        return false
    end
    if not EquippedPets or not EquippedPets:FindFirstAncestor("PlayerGui") then
        warn("Equipped path not found, waiting...")
        return false
    end
    if not PetEquipped or not PetEquipped:FindFirstAncestor("PlayerGui") then
        warn("Pet equipped TextLabel not found, waiting...")
        return false
    end
    if not deleteLabel or not deleteLabel:FindFirstAncestor("PlayerGui") then
        warn("Delete label not found, waiting...")
        return false
    end
    if not uiGridLayout or not uiGridLayout:FindFirstAncestor("PlayerGui") then
        warn("UIGridLayout not found, waiting...")
        return false
    end
    return true
end

-- Function to extract number from TextLabel text
local function getNumberFromText(text)
    number = tonumber(text:match("%d+"))
    return number or 0
end

-- Function to get the appropriate size for the Shadow ImageLabel based on UIGridLayout CellSize
local function getShadowSize()
    cellSize = uiGridLayout.CellSize
    
    -- Extract the pixel values from the UDim2
    pixelWidth = cellSize.X.Offset
    pixelHeight = cellSize.Y.Offset
    
    -- Return a UDim2 with the same pixel values
    return UDim2.new(0, pixelWidth, 0, pixelHeight)
end

-- Function to find the shadow in a delete label
local function findShadowInLabel(label)
    -- Check for both possible names of the shadow
    return label:FindFirstChild("Shadow") or label:FindFirstChild("DeleteLabelShadow")
end

-- Function to add delete label to a button
local function addDeleteLabelToButton(button)
    -- Check if button already has a delete label
    if buttonsWithDeleteLabel[button] then
        -- Update the shadow size if it already exists and is in PetScroll
        if button:IsDescendantOf(PetScroll) then
            shadowSize = getShadowSize()
            shadow = findShadowInLabel(buttonsWithDeleteLabel[button])
            if shadow then
                shadow.Size = shadowSize
            end
        end
        return
    end
    
    -- Clone the delete label
    clonedLabel = deleteLabel:Clone()
    clonedLabel.Visible = true
    
    -- Set the Shadow size based on parent
    shadow = findShadowInLabel(clonedLabel)
    if shadow then
        if button:IsDescendantOf(PetScroll) then
            shadow.Size = getShadowSize()
        else
            -- For EquippedPets, use fixed size
            shadow.Size = EQUIPPED_SHADOW_SIZE
        end
    end
    
    clonedLabel.Parent = button
    
    -- Store reference to the cloned label
    buttonsWithDeleteLabel[button] = clonedLabel
end

-- Function to remove delete label from a button
local function removeDeleteLabelFromButton(button)
    -- Check if button has a delete label
    if buttonsWithDeleteLabel[button] then
        -- Destroy the cloned label
        buttonsWithDeleteLabel[button]:Destroy()
        buttonsWithDeleteLabel[button] = nil
    end
end

-- Function to update all shadow sizes
local function updateAllShadowSizes()
    shadowSize = getShadowSize()
    for button, clonedLabel in pairs(buttonsWithDeleteLabel) do
        -- Only update shadows for buttons in PetScroll
        if button:IsDescendantOf(PetScroll) then
            shadow = findShadowInLabel(clonedLabel)
            if shadow then
                shadow.Size = shadowSize
            end
        end
    end
end

-- Initialize previousCellSize to current CellSize at start
previousCellSize = uiGridLayout.CellSize

-- Main loop to run checks
while wait(0.01) do -- Check every 0.01 seconds for more responsiveness
    if not checkPaths() then
        continue
    end
    
    -- Always update shadow sizes on the first run and when CellSize changes
    currentCellSize = uiGridLayout.CellSize
    cellSizeChanged = previousCellSize ~= currentCellSize
    
    -- If CellSize changed, update all shadow sizes
    if cellSizeChanged then
        updateAllShadowSizes()
        previousCellSize = currentCellSize
    end
    
    -- Store the buttons to move in arrays
    yellowButtons = {}
    whiteButtons = {}
    inventoryGreenButtons = {}
    equippedGreenButtons = {}
    redButtons = {} -- New array for red buttons
    
    -- Check if the TextLabel text has changed
    currentTextLabelText = PetEquipped.Text
    textLabelChanged = currentTextLabelText ~= previousTextLabelText
    
    -- Extract numbers from TextLabel text for comparison
    currentNumber = getNumberFromText(currentTextLabelText)
    previousNumber = getNumberFromText(previousTextLabelText)
    
    -- Determine if pets were equipped or unequipped
    petsEquipped = textLabelChanged and currentNumber > previousNumber
    petsUnequipped = textLabelChanged and currentNumber < previousNumber
    
    -- Update previous text value
    previousTextLabelText = currentTextLabelText
    
    -- First, check all buttons with delete labels and remove them if they're no longer red
    for button, label in pairs(buttonsWithDeleteLabel) do
        if button:IsDescendantOf(game) then
            if button.ImageColor3 ~= redColor then
                -- Button is no longer red, remove the delete label
                if label and label:IsDescendantOf(game) then
                    label:Destroy()
                end
                buttonsWithDeleteLabel[button] = nil
            end
        else
            -- Button no longer exists
            buttonsWithDeleteLabel[button] = nil
        end
    end
    
    -- Process inventory buttons
    for _, obj in ipairs(PetScroll:GetChildren()) do
        if obj:IsA("ImageButton") then
            if obj.ImageColor3 == yellowColor then
                table.insert(yellowButtons, obj)
            elseif obj.ImageColor3 == greenColor then
                table.insert(inventoryGreenButtons, obj)
            elseif obj.ImageColor3 == redColor then
                table.insert(redButtons, obj)
                addDeleteLabelToButton(obj)
            end
        end
    end
    
    -- Process equipped buttons
    for _, obj in ipairs(EquippedPets:GetChildren()) do
        if obj:IsA("ImageButton") then
            if obj.ImageColor3 == whiteColor then
                table.insert(whiteButtons, obj)
            elseif obj.ImageColor3 == greenColor then
                table.insert(equippedGreenButtons, obj)
            elseif obj.ImageColor3 == redColor then
                table.insert(redButtons, obj)
                addDeleteLabelToButton(obj)
            end
        end
    end
    
    -- Move yellow buttons to equipped
    for _, button in ipairs(yellowButtons) do
        button.Parent = EquippedPets
        
        -- If the button has a delete label, update its shadow size to the equipped size
        if buttonsWithDeleteLabel[button] then
            shadow = findShadowInLabel(buttonsWithDeleteLabel[button])
            if shadow then
                shadow.Size = EQUIPPED_SHADOW_SIZE
            end
        end
    end
    
    -- Move white buttons to inventory
    for _, button in ipairs(whiteButtons) do
        button.Parent = PetScroll
        
        -- If the button has a delete label, update its shadow size to the inventory size
        if buttonsWithDeleteLabel[button] then
            shadow = findShadowInLabel(buttonsWithDeleteLabel[button])
            if shadow then
                shadow.Size = getShadowSize()
            end
        end
    end
    
    -- If TextLabel number increased, move any green buttons from inventory to equipped
    if petsEquipped and #inventoryGreenButtons > 0 then
        for _, button in ipairs(inventoryGreenButtons) do
            button.Parent = EquippedPets
            
            -- If the button has a delete label, update its shadow size to the equipped size
            if buttonsWithDeleteLabel[button] then
                shadow = findShadowInLabel(buttonsWithDeleteLabel[button])
                if shadow then
                    shadow.Size = EQUIPPED_SHADOW_SIZE
                end
            end
        end
    end
    
    -- If TextLabel number decreased, move any green buttons from equipped to inventory
    if petsUnequipped and #equippedGreenButtons > 0 then
        for _, button in ipairs(equippedGreenButtons) do
            button.Parent = PetScroll
            
            -- If the button has a delete label, update its shadow size to the inventory size
            if buttonsWithDeleteLabel[button] then
                shadow = findShadowInLabel(buttonsWithDeleteLabel[button])
                if shadow then
                    shadow.Size = getShadowSize()
                end
            end
        end
    end
end
